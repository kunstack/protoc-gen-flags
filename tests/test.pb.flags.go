// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-flags. DO NOT EDIT.

package tests

import (
	"github.com/kunstack/protoc-gen-flags/flags"
	"github.com/kunstack/protoc-gen-flags/types"
	"github.com/kunstack/protoc-gen-flags/utils"
	"github.com/spf13/pflag"
)

var (
	_ = pflag.NewFlagSet
	_ = utils.BuildFlagName
	_ = types.Bool
	_ = flags.Interface(nil)
)

func (x *TestMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// Hello flag generated for [(flags.value).float = {
	//     disabled: false,
	//     name: "hello",
	//     short: "h",
	//     usage: "Hello world '\"' flag",
	//     hidden: true,
	//     deprecated: true,
	//     deprecated_usage: "This flag is deprecated, use --greeting instead",
	// }]
	fs.Float32VarP(&x.Hello, utils.BuildFlagName(prefix, "hello"), "h", x.Hello, "Hello world '\"' flag")
	fs.MarkHidden("hello")
	fs.MarkDeprecated("hello", "This flag is deprecated, use --greeting instead")

	// World flag generated for [(flags.value).string = {
	//     disabled: false,
	//     name: "world",
	//     short: "",
	//     usage: "World flags (can be specified multiple times)",
	//     hidden: false,
	//     deprecated: true,
	//     deprecated_usage: "This flag is deprecated, use --target instead",
	// }]
	fs.StringVarP(&x.World, utils.BuildFlagName(prefix, "world"), "", x.World, "World flags (can be specified multiple times)")
	fs.MarkDeprecated("world", "This flag is deprecated, use --target instead")

	// Greeting flag generated for [(flags.value).string = {
	//     disabled: false,
	//     name: "greeting",
	//     short: "g",
	//     usage: "Greeting message to display",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.StringVarP(&x.Greeting, utils.BuildFlagName(prefix, "greeting"), "g", x.Greeting, "Greeting message to display")

	// Count flag generated for [(flags.value).int32 = {
	//     disabled: false,
	//     name: "count",
	//     short: "c",
	//     usage: "Number of times to repeat the message",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int32VarP(&x.Count, utils.BuildFlagName(prefix, "count"), "c", x.Count, "Number of times to repeat the message")

	// Verbose flag generated for [(flags.value).bool = {
	//     disabled: false,
	//     name: "verbose",
	//     short: "v",
	//     usage: "Enable verbose output",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.BoolVarP(&x.Verbose, utils.BuildFlagName(prefix, "verbose"), "v", x.Verbose, "Enable verbose output")

	// Verbose2 flag generated for [(flags.value).sfixed64 = {
	//     disabled: false,
	//     name: "verbose2",
	//     short: "V",
	//     usage: "Enable verbose output with sfixed64",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int64VarP(&x.Verbose2, utils.BuildFlagName(prefix, "verbose2"), "V", x.Verbose2, "Enable verbose output with sfixed64")

	// UserId flag generated for [(flags.value).int64 = {
	//     disabled: false,
	//     name: "user-id",
	//     short: "u",
	//     usage: "User ID",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int64VarP(&x.UserId, utils.BuildFlagName(prefix, "user-id"), "u", x.UserId, "User ID")

	// Port flag generated for [(flags.value).uint32 = {
	//     disabled: false,
	//     name: "port",
	//     short: "p",
	//     usage: "Port number",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Uint32VarP(&x.Port, utils.BuildFlagName(prefix, "port"), "p", x.Port, "Port number")

	// Size flag generated for [(flags.value).uint64 = {
	//     disabled: false,
	//     name: "size",
	//     short: "s",
	//     usage: "Size in bytes",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Uint64VarP(&x.Size, utils.BuildFlagName(prefix, "size"), "s", x.Size, "Size in bytes")

	// Temperature flag generated for [(flags.value).sint32 = {
	//     disabled: false,
	//     name: "temperature",
	//     short: "t",
	//     usage: "Temperature value",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int32VarP(&x.Temperature, utils.BuildFlagName(prefix, "temperature"), "t", x.Temperature, "Temperature value")

	// Timestamp flag generated for [(flags.value).sint64 = {
	//     disabled: false,
	//     name: "timestamp",
	//     short: "T",
	//     usage: "Timestamp value",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int64VarP(&x.Timestamp, utils.BuildFlagName(prefix, "timestamp"), "T", x.Timestamp, "Timestamp value")

	// Timeout flag generated for [(flags.value).fixed32 = {
	//     disabled: false,
	//     name: "timeout",
	//     short: "",
	//     usage: "Timeout in milliseconds",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Uint32VarP(&x.Timeout, utils.BuildFlagName(prefix, "timeout"), "", x.Timeout, "Timeout in milliseconds")

	// Bandwidth flag generated for [(flags.value).fixed64 = {
	//     disabled: false,
	//     name: "bandwidth",
	//     short: "",
	//     usage: "Bandwidth in bits per second",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Uint64VarP(&x.Bandwidth, utils.BuildFlagName(prefix, "bandwidth"), "", x.Bandwidth, "Bandwidth in bits per second")

	// Offset flag generated for [(flags.value).sfixed32 = {
	//     disabled: false,
	//     name: "offset",
	//     short: "",
	//     usage: "Offset value",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Int32VarP(&x.Offset, utils.BuildFlagName(prefix, "offset"), "", x.Offset, "Offset value")

	// Ratio flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "ratio",
	//     short: "r",
	//     usage: "Ratio value",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.Float64VarP(&x.Ratio, utils.BuildFlagName(prefix, "ratio"), "r", x.Ratio, "Ratio value")

	// Byte flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "byte",
	//     short: "b",
	//     usage: "Byte data in base64 encoding",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.BytesHexVarP(&x.Byte, utils.BuildFlagName(prefix, "byte"), "b", x.Byte, "Byte data in base64 encoding")

	// ConfigData flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "config-data",
	//     short: "cd",
	//     usage: "Configuration data in base64 format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.BytesBase64VarP(&x.ConfigData, utils.BuildFlagName(prefix, "config-data"), "cd", x.ConfigData, "Configuration data in base64 format")

	// SecretKey flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "secret-key",
	//     short: "sk",
	//     usage: "Secret key in hex format",
	//     hidden: true,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.BytesHexVarP(&x.SecretKey, utils.BuildFlagName(prefix, "secret-key"), "sk", x.SecretKey, "Secret key in hex format")
	fs.MarkHidden("secret-key")

	// FileChunks flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "file-chunks",
	//     short: "fc",
	//     usage: "File chunks in base64 format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.VarP(types.BytesSlice(x.FileChunks), utils.BuildFlagName(prefix, "file-chunks"), "fc", "File chunks in base64 format")

	// HexChunks flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "hex-chunks",
	//     short: "hc",
	//     usage: "Data chunks in hex format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.VarP(types.BytesHexSlice(x.HexChunks), utils.BuildFlagName(prefix, "hex-chunks"), "hc", "Data chunks in hex format")

	// TestEnum flag generated for [(flags.value).enum = {
	//     disabled: false,
	//     name: "test-enum",
	//     short: "e",
	//     usage: "Test enum field",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.Enum(&x.TestEnum), utils.BuildFlagName(prefix, "test-enum"), "e", "Test enum field")

	// TimeoutDuration flag generated for [(flags.value).duration = {
	//     disabled: false,
	//     name: "timeout-duration",
	//     short: "d",
	//     usage: "Timeout duration (e.g., 30s, 5m, 1h)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.Duration(x.TimeoutDuration), utils.BuildFlagName(prefix, "timeout-duration"), "d", "Timeout duration (e.g., 30s, 5m, 1h)")

	switch x := x.DurationChoice.(type) {
	case *TestMessage_ProcessingTime:
		// ProcessingTime flag generated for [(flags.value).duration = {
		//     disabled: false,
		//     name: "processing-time",
		//     short: "P",
		//     usage: "Processing time duration",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.VarP(types.Duration(x.ProcessingTime), utils.BuildFlagName(prefix, "processing-time"), "P", "Processing time duration")

	case *TestMessage_WaitingTime:
		// WaitingTime flag generated for [(flags.value).duration = {
		//     disabled: false,
		//     name: "waiting-time",
		//     short: "w",
		//     usage: "Waiting time duration",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.VarP(types.Duration(x.WaitingTime), utils.BuildFlagName(prefix, "waiting-time"), "w", "Waiting time duration")
	}
	if v, ok := interface{}(x.SimpleField).(flags.Interface); ok && x.SimpleField != nil {
		v.AddFlags(fs, "simple-field")
	}
	// Labels flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "labels",
	//     short: "l",
	//     usage: "Key-value labels (JSON format)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_STRING
	// }]
	fs.StringToStringVarP(&x.Labels, utils.BuildFlagName(prefix, "labels"), "l", x.Labels, "Key-value labels (JSON format)")

	// Counters flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "counters",
	//     short: "",
	//     usage: "String-to-integer counters (JSON format)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_UNSPECIFIED
	// }]
	fs.VarP(types.JSON(&x.Counters), utils.BuildFlagName(prefix, "counters"), "", "String-to-integer counters (JSON format)")

	// StringMap flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "string-map",
	//     short: "sm",
	//     usage: "String-to-string map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_STRING
	// }]
	fs.StringToStringVarP(&x.StringMap, utils.BuildFlagName(prefix, "string-map"), "sm", x.StringMap, "String-to-string map using native format")

	// Int32Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "int32-map",
	//     short: "i32",
	//     usage: "String-to-int32 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.VarP(types.StringToInt32(&x.Int32Map), utils.BuildFlagName(prefix, "int32-map"), "i32", "String-to-int32 map using native format")

	// Int64Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "int64-map",
	//     short: "i64",
	//     usage: "String-to-int64 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.StringToInt64VarP(&x.Int64Map, utils.BuildFlagName(prefix, "int64-map"), "i64", x.Int64Map, "String-to-int64 map using native format")

	// Uint32Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "uint32-map",
	//     short: "u32",
	//     usage: "String-to-uint32 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.VarP(types.StringToUint32(&x.Uint32Map), utils.BuildFlagName(prefix, "uint32-map"), "u32", "String-to-uint32 map using native format")

	// Uint64Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "uint64-map",
	//     short: "u64",
	//     usage: "String-to-uint64 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.VarP(types.StringToUint64(&x.Uint64Map), utils.BuildFlagName(prefix, "uint64-map"), "u64", "String-to-uint64 map using native format")

	// Sfixed32Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "sfixed32-map",
	//     short: "sf32",
	//     usage: "String-to-sfixed32 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.VarP(types.StringToInt32(&x.Sfixed32Map), utils.BuildFlagName(prefix, "sfixed32-map"), "sf32", "String-to-sfixed32 map using native format")

	// Sfixed64Map flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "sfixed64-map",
	//     short: "sf64",
	//     usage: "String-to-sfixed64 map using native format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_STRING_TO_INT
	// }]
	fs.StringToInt64VarP(&x.Sfixed64Map, utils.BuildFlagName(prefix, "sfixed64-map"), "sf64", x.Sfixed64Map, "String-to-sfixed64 map using native format")

	// JsonMap flag generated for [(flags.value).map = {
	//     disabled: false,
	//     name: "json-map",
	//     short: "j",
	//     usage: "Generic JSON map format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     format: MAP_FORMAT_TYPE_JSON
	// }]
	fs.VarP(types.JSON(&x.JsonMap), utils.BuildFlagName(prefix, "json-map"), "j", "Generic JSON map format")

	// RepeatedStrings flag generated for [(flags.value).string = {
	//     disabled: false,
	//     name: "repeated-strings",
	//     short: "rs",
	//     usage: "Repeated strings for comparison",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.StringSliceVarP(&x.RepeatedStrings, utils.BuildFlagName(prefix, "repeated-strings"), "rs", x.RepeatedStrings, "Repeated strings for comparison")

	// Delays flag generated for [(flags.value).repeated.duration = {
	//     disabled: false,
	//     name: "delays",
	//     short: "d",
	//     usage: "Delay durations (e.g., 1s, 2m, 3h)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DurationSlice(x.Delays), utils.BuildFlagName(prefix, "delays"), "d", "Delay durations (e.g., 1s, 2m, 3h)")

	// Intervals flag generated for [(flags.value).repeated.duration = {
	//     disabled: false,
	//     name: "intervals",
	//     short: "i",
	//     usage: "Time intervals between events",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DurationSlice(x.Intervals), utils.BuildFlagName(prefix, "intervals"), "i", "Time intervals between events")

	// Timeouts flag generated for [(flags.value).repeated.duration = {
	//     disabled: false,
	//     name: "timeouts",
	//     short: "t",
	//     usage: "Timeout durations for operations",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DurationSlice(x.Timeouts), utils.BuildFlagName(prefix, "timeouts"), "t", "Timeout durations for operations")

}

func (x *SimpleMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// Name flag generated for [(flags.value).string = {
	//     disabled: false,
	//     name: "name",
	//     short: "",
	//     usage: "Name parameter",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.StringVarP(&x.Name, utils.BuildFlagName(prefix, "name"), "", x.Name, "Name parameter")

}

func (x *WrapperValueMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// Name flag generated for [(flags.value).bool = {
	//     disabled: false,
	//     name: "name",
	//     short: "",
	//     usage: "Name parameter",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.BoolSlice(x.Name), utils.BuildFlagName(prefix, "name"), "", "Name parameter")

	// DoubleValue flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "double-value",
	//     short: "dv",
	//     usage: "Double value wrapper",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.Double(x.DoubleValue), utils.BuildFlagName(prefix, "double-value"), "dv", "Double value wrapper")

	// DoubleValues flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "double-values",
	//     short: "dvs",
	//     usage: "Multiple double values",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DoubleSlice(x.DoubleValues), utils.BuildFlagName(prefix, "double-values"), "dvs", "Multiple double values")

	// BytesValue flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "bytes-value",
	//     short: "bv",
	//     usage: "Bytes value wrapper (base64 encoded)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.VarP(types.Bytes(x.BytesValue), utils.BuildFlagName(prefix, "bytes-value"), "bv", "Bytes value wrapper (base64 encoded)")

	// BytesValues flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "bytes-values",
	//     short: "bvs",
	//     usage: "Multiple bytes values (base64 encoded)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.VarP(types.BytesSlice(x.BytesValues), utils.BuildFlagName(prefix, "bytes-values"), "bvs", "Multiple bytes values (base64 encoded)")

	// BytesHexValues flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "bytes-hex-values",
	//     short: "bhx",
	//     usage: "Multiple bytes values (hex encoded)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.VarP(types.BytesHexSlice(x.BytesHexValues), utils.BuildFlagName(prefix, "bytes-hex-values"), "bhx", "Multiple bytes values (hex encoded)")

}

func (x *DoubleSliceTestMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// Measurements flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "measurements",
	//     short: "m",
	//     usage: "Scientific measurements (e.g., 3.14159, 2.71828, 1.41421)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DoubleSlice(x.Measurements), utils.BuildFlagName(prefix, "measurements"), "m", "Scientific measurements (e.g., 3.14159, 2.71828, 1.41421)")

	// ScientificValues flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "scientific-values",
	//     short: "sv",
	//     usage: "Scientific notation values (e.g., 1.23e-4, 5.67e+8)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DoubleSlice(x.ScientificValues), utils.BuildFlagName(prefix, "scientific-values"), "sv", "Scientific notation values (e.g., 1.23e-4, 5.67e+8)")

	// TemperatureReadings flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "temperature-readings",
	//     short: "t",
	//     usage: "Temperature readings in Celsius",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DoubleSlice(x.TemperatureReadings), utils.BuildFlagName(prefix, "temperature-readings"), "t", "Temperature readings in Celsius")

	// Coordinates flag generated for [(flags.value).double = {
	//     disabled: false,
	//     name: "coordinates",
	//     short: "c",
	//     usage: "GPS coordinates (lat, lon pairs)",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.DoubleSlice(x.Coordinates), utils.BuildFlagName(prefix, "coordinates"), "c", "GPS coordinates (lat, lon pairs)")

}

func (x *BytesSliceTestMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// DataChunks flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "data-chunks",
	//     short: "dc",
	//     usage: "Data chunks in base64 format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.VarP(types.BytesSlice(x.DataChunks), utils.BuildFlagName(prefix, "data-chunks"), "dc", "Data chunks in base64 format")

	// FileContents flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "file-contents",
	//     short: "fc",
	//     usage: "File contents in base64 format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_BASE64
	// }
	fs.VarP(types.BytesSlice(x.FileContents), utils.BuildFlagName(prefix, "file-contents"), "fc", "File contents in base64 format")

	// HexData flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "hex-data",
	//     short: "hd",
	//     usage: "Data in hexadecimal format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.VarP(types.BytesHexSlice(x.HexData), utils.BuildFlagName(prefix, "hex-data"), "hd", "Data in hexadecimal format")

	// BinaryPayloads flag generated for (flags.value).bytes = {
	//  disabled: false,
	//     name: "binary-payloads",
	//     short: "bp",
	//     usage: "Binary payloads in hex format",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	//     encoding: BYTES_ENCODING_TYPE_HEX
	// }
	fs.VarP(types.BytesHexSlice(x.BinaryPayloads), utils.BuildFlagName(prefix, "binary-payloads"), "bp", "Binary payloads in hex format")

}

func (x *EmptyMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
}

func (x *WrapperMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	// Value flag generated for [(flags.value).float = {
	//     disabled: false,
	//     name: "value",
	//     short: "",
	//     usage: "hello",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.VarP(types.Float(x.Value), utils.BuildFlagName(prefix, "value"), "", "hello")

	// Value2 flag generated for [(flags.value).string = {
	//     disabled: false,
	//     name: "value2",
	//     short: "",
	//     usage: "This should not appear in help",
	//     hidden: false,
	//     deprecated: false,
	//     deprecated_usage: "",
	// }]
	fs.StringSliceVarP(&x.Value2, utils.BuildFlagName(prefix, "value2"), "", x.Value2, "This should not appear in help")

}

func (x *OneofMessage) AddFlags(fs *pflag.FlagSet, prefix ...string) {
	switch x := x.TestOneof.(type) {
	case *OneofMessage_StringValue:
		// StringValue flag generated for [(flags.value).string = {
		//     disabled: false,
		//     name: "string-value",
		//     short: "s",
		//     usage: "String value in oneof",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.StringVarP(&x.StringValue, utils.BuildFlagName(prefix, "string-value"), "s", x.StringValue, "String value in oneof")

	case *OneofMessage_IntValue:
		// IntValue flag generated for [(flags.value).int32 = {
		//     disabled: false,
		//     name: "int-value",
		//     short: "i",
		//     usage: "Integer value in oneof",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.Int32VarP(&x.IntValue, utils.BuildFlagName(prefix, "int-value"), "i", x.IntValue, "Integer value in oneof")

	case *OneofMessage_DurationValue:
		// DurationValue flag generated for [(flags.value).duration = {
		//     disabled: false,
		//     name: "duration-value",
		//     short: "d",
		//     usage: "Duration value in oneof",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.VarP(types.Duration(x.DurationValue), utils.BuildFlagName(prefix, "duration-value"), "d", "Duration value in oneof")

	case *OneofMessage_BoolValue:
		// BoolValue flag generated for [(flags.value).bool = {
		//     disabled: false,
		//     name: "bool-value",
		//     short: "b",
		//     usage: "Boolean value in oneof",
		//     hidden: false,
		//     deprecated: false,
		//     deprecated_usage: "",
		// }]
		fs.BoolVarP(&x.BoolValue, utils.BuildFlagName(prefix, "bool-value"), "b", x.BoolValue, "Boolean value in oneof")
	}
}
