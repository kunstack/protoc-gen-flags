// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tests/test.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package tests

import (
	_ "github.com/kunstack/protoc-gen-flags/flags"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum1 int32

const (
	TestEnum1_TEST_ENUM_UNSPECIFIED TestEnum1 = 0
	TestEnum1_TEST_ENUM_VALUE1      TestEnum1 = 1
	TestEnum1_TEST_ENUM_VALUE2      TestEnum1 = 2
	TestEnum1_TEST_ENUM_VALUE3      TestEnum1 = 3
	TestEnum1_test_enum_value4      TestEnum1 = 4
)

// Enum value maps for TestEnum1.
var (
	TestEnum1_name = map[int32]string{
		0: "TEST_ENUM_UNSPECIFIED",
		1: "TEST_ENUM_VALUE1",
		2: "TEST_ENUM_VALUE2",
		3: "TEST_ENUM_VALUE3",
		4: "test_enum_value4",
	}
	TestEnum1_value = map[string]int32{
		"TEST_ENUM_UNSPECIFIED": 0,
		"TEST_ENUM_VALUE1":      1,
		"TEST_ENUM_VALUE2":      2,
		"TEST_ENUM_VALUE3":      3,
		"test_enum_value4":      4,
	}
)

func (x TestEnum1) Enum() *TestEnum1 {
	p := new(TestEnum1)
	*p = x
	return p
}

func (x TestEnum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum1) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_test_proto_enumTypes[0].Descriptor()
}

func (TestEnum1) Type() protoreflect.EnumType {
	return &file_tests_test_proto_enumTypes[0]
}

func (x TestEnum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum1.Descriptor instead.
func (TestEnum1) EnumDescriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{0}
}

type TestForMessage struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Hello    float32                `protobuf:"fixed32,1,opt,name=hello,proto3" json:"hello,omitempty"`
	World    string                 `protobuf:"bytes,2,opt,name=world,proto3" json:"world,omitempty"`
	Greeting string                 `protobuf:"bytes,3,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Count    int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Verbose  bool                   `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Verbose2 int64                  `protobuf:"fixed64,6,opt,name=verbose2,proto3" json:"verbose2,omitempty"`
	// Additional field types for testing
	UserId      int64   `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Port        uint32  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	Size        uint64  `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Temperature int32   `protobuf:"zigzag32,10,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Timestamp   int64   `protobuf:"zigzag64,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Timeout     uint32  `protobuf:"fixed32,12,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Bandwidth   uint64  `protobuf:"fixed64,13,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Offset      int32   `protobuf:"fixed32,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Ratio       float64 `protobuf:"fixed64,15,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Byte        []byte  `protobuf:"bytes,16,opt,name=byte,proto3,oneof" json:"byte,omitempty"`
	// Additional native bytes fields with different configurations
	ConfigData []byte `protobuf:"bytes,33,opt,name=config_data,json=configData,proto3,oneof" json:"config_data,omitempty"`
	SecretKey  []byte `protobuf:"bytes,34,opt,name=secret_key,json=secretKey,proto3,oneof" json:"secret_key,omitempty"`
	// Repeated native bytes
	FileChunks [][]byte `protobuf:"bytes,35,rep,name=file_chunks,json=fileChunks,proto3" json:"file_chunks,omitempty"`
	HexChunks  [][]byte `protobuf:"bytes,36,rep,name=hex_chunks,json=hexChunks,proto3" json:"hex_chunks,omitempty"`
	// Test repeated bytes with default values
	Base64Defaults [][]byte `protobuf:"bytes,40,rep,name=base64_defaults,json=base64Defaults,proto3" json:"base64_defaults,omitempty"`
	HexDefaults    [][]byte `protobuf:"bytes,41,rep,name=hex_defaults,json=hexDefaults,proto3" json:"hex_defaults,omitempty"`
	// Test enum type
	TestEnum []TestEnum1 `protobuf:"varint,17,rep,packed,name=test_enum,json=testEnum,proto3,enum=tests.TestEnum1" json:"test_enum,omitempty"`
	// Test duration type
	TimeoutDuration *durationpb.Duration `protobuf:"bytes,18,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	// Test message field type for *flags.FieldFlags_Message
	SimpleField *SimpleMessage `protobuf:"bytes,21,opt,name=simple_field,json=simpleField,proto3" json:"simple_field,omitempty"`
	// Test map field type
	Labels   map[string]string `protobuf:"bytes,22,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Counters map[string]int32  `protobuf:"bytes,23,rep,name=counters,proto3" json:"counters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Test different map formats
	StringMap   map[string]string `protobuf:"bytes,24,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int32Map    map[string]int32  `protobuf:"bytes,25,rep,name=int32_map,json=int32Map,proto3" json:"int32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map    map[string]int64  `protobuf:"bytes,26,rep,name=int64_map,json=int64Map,proto3" json:"int64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map   map[string]uint32 `protobuf:"bytes,27,rep,name=uint32_map,json=uint32Map,proto3" json:"uint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map   map[string]uint64 `protobuf:"bytes,28,rep,name=uint64_map,json=uint64Map,proto3" json:"uint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sfixed32Map map[string]int32  `protobuf:"bytes,29,rep,name=sfixed32_map,json=sfixed32Map,proto3" json:"sfixed32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed64Map map[string]int64  `protobuf:"bytes,30,rep,name=sfixed64_map,json=sfixed64Map,proto3" json:"sfixed64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	JsonMap     map[string]string `protobuf:"bytes,31,rep,name=json_map,json=jsonMap,proto3" json:"json_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Test repeated string slice for comparison
	RepeatedStrings []string `protobuf:"bytes,32,rep,name=repeated_strings,json=repeatedStrings,proto3" json:"repeated_strings,omitempty"`
	// Test repeated duration fields for DurationSlice functionality
	Delays        []*durationpb.Duration `protobuf:"bytes,37,rep,name=delays,proto3" json:"delays,omitempty"`
	Intervals     []*durationpb.Duration `protobuf:"bytes,38,rep,name=intervals,proto3" json:"intervals,omitempty"`
	Timeouts      []*durationpb.Duration `protobuf:"bytes,39,rep,name=timeouts,proto3" json:"timeouts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestForMessage) Reset() {
	*x = TestForMessage{}
	mi := &file_tests_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestForMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestForMessage) ProtoMessage() {}

func (x *TestForMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestForMessage.ProtoReflect.Descriptor instead.
func (*TestForMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestForMessage) GetHello() float32 {
	if x != nil {
		return x.Hello
	}
	return 0
}

func (x *TestForMessage) GetWorld() string {
	if x != nil {
		return x.World
	}
	return ""
}

func (x *TestForMessage) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *TestForMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestForMessage) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *TestForMessage) GetVerbose2() int64 {
	if x != nil {
		return x.Verbose2
	}
	return 0
}

func (x *TestForMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TestForMessage) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestForMessage) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TestForMessage) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TestForMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TestForMessage) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestForMessage) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *TestForMessage) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TestForMessage) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *TestForMessage) GetByte() []byte {
	if x != nil {
		return x.Byte
	}
	return nil
}

func (x *TestForMessage) GetConfigData() []byte {
	if x != nil {
		return x.ConfigData
	}
	return nil
}

func (x *TestForMessage) GetSecretKey() []byte {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *TestForMessage) GetFileChunks() [][]byte {
	if x != nil {
		return x.FileChunks
	}
	return nil
}

func (x *TestForMessage) GetHexChunks() [][]byte {
	if x != nil {
		return x.HexChunks
	}
	return nil
}

func (x *TestForMessage) GetBase64Defaults() [][]byte {
	if x != nil {
		return x.Base64Defaults
	}
	return nil
}

func (x *TestForMessage) GetHexDefaults() [][]byte {
	if x != nil {
		return x.HexDefaults
	}
	return nil
}

func (x *TestForMessage) GetTestEnum() []TestEnum1 {
	if x != nil {
		return x.TestEnum
	}
	return nil
}

func (x *TestForMessage) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *TestForMessage) GetSimpleField() *SimpleMessage {
	if x != nil {
		return x.SimpleField
	}
	return nil
}

func (x *TestForMessage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TestForMessage) GetCounters() map[string]int32 {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *TestForMessage) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *TestForMessage) GetInt32Map() map[string]int32 {
	if x != nil {
		return x.Int32Map
	}
	return nil
}

func (x *TestForMessage) GetInt64Map() map[string]int64 {
	if x != nil {
		return x.Int64Map
	}
	return nil
}

func (x *TestForMessage) GetUint32Map() map[string]uint32 {
	if x != nil {
		return x.Uint32Map
	}
	return nil
}

func (x *TestForMessage) GetUint64Map() map[string]uint64 {
	if x != nil {
		return x.Uint64Map
	}
	return nil
}

func (x *TestForMessage) GetSfixed32Map() map[string]int32 {
	if x != nil {
		return x.Sfixed32Map
	}
	return nil
}

func (x *TestForMessage) GetSfixed64Map() map[string]int64 {
	if x != nil {
		return x.Sfixed64Map
	}
	return nil
}

func (x *TestForMessage) GetJsonMap() map[string]string {
	if x != nil {
		return x.JsonMap
	}
	return nil
}

func (x *TestForMessage) GetRepeatedStrings() []string {
	if x != nil {
		return x.RepeatedStrings
	}
	return nil
}

func (x *TestForMessage) GetDelays() []*durationpb.Duration {
	if x != nil {
		return x.Delays
	}
	return nil
}

func (x *TestForMessage) GetIntervals() []*durationpb.Duration {
	if x != nil {
		return x.Intervals
	}
	return nil
}

func (x *TestForMessage) GetTimeouts() []*durationpb.Duration {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

type SimpleMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Test timestamp with default value
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleMessage) Reset() {
	*x = SimpleMessage{}
	mi := &file_tests_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMessage) ProtoMessage() {}

func (x *SimpleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMessage.ProtoReflect.Descriptor instead.
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type WrapperValueMessage struct {
	state protoimpl.MessageState  `protogen:"open.v1"`
	Name  []*wrapperspb.BoolValue `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	// Test DoubleValue wrapper type
	DoubleValue *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
	// Test DoubleSliceValue for repeated DoubleValue
	DoubleValues []*wrapperspb.DoubleValue `protobuf:"bytes,3,rep,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	// Test BytesValue wrapper type with base64 encoding
	BytesValue *wrapperspb.BytesValue `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
	// Test BytesSliceValue for repeated BytesValue with base64 encoding
	// Test BytesSliceValue for repeated BytesValue with base64 encoding
	BytesValues *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=bytes_values,json=bytesValues,proto3" json:"bytes_values,omitempty"`
	// Test BytesHexSliceValue for repeated BytesValue with hex encoding
	BytesHexValues  []*wrapperspb.BytesValue `protobuf:"bytes,6,rep,name=bytes_hex_values,json=bytesHexValues,proto3" json:"bytes_hex_values,omitempty"`
	BytesHexValuesx *wrapperspb.BytesValue   `protobuf:"bytes,7,opt,name=bytes_hex_valuesx,json=bytesHexValuesx,proto3" json:"bytes_hex_valuesx,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WrapperValueMessage) Reset() {
	*x = WrapperValueMessage{}
	mi := &file_tests_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrapperValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapperValueMessage) ProtoMessage() {}

func (x *WrapperValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapperValueMessage.ProtoReflect.Descriptor instead.
func (*WrapperValueMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{2}
}

func (x *WrapperValueMessage) GetName() []*wrapperspb.BoolValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WrapperValueMessage) GetDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *WrapperValueMessage) GetDoubleValues() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *WrapperValueMessage) GetBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *WrapperValueMessage) GetBytesValues() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValues
	}
	return nil
}

func (x *WrapperValueMessage) GetBytesHexValues() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BytesHexValues
	}
	return nil
}

func (x *WrapperValueMessage) GetBytesHexValuesx() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesHexValuesx
	}
	return nil
}

// Dedicated message for testing DoubleSliceValue functionality
type DoubleSliceTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test various double slice configurations
	Measurements        []*wrapperspb.DoubleValue `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
	ScientificValues    []*wrapperspb.DoubleValue `protobuf:"bytes,2,rep,name=scientific_values,json=scientificValues,proto3" json:"scientific_values,omitempty"`
	TemperatureReadings []*wrapperspb.DoubleValue `protobuf:"bytes,3,rep,name=temperature_readings,json=temperatureReadings,proto3" json:"temperature_readings,omitempty"`
	Coordinates         []*wrapperspb.DoubleValue `protobuf:"bytes,4,rep,name=coordinates,proto3" json:"coordinates,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DoubleSliceTestMessage) Reset() {
	*x = DoubleSliceTestMessage{}
	mi := &file_tests_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleSliceTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleSliceTestMessage) ProtoMessage() {}

func (x *DoubleSliceTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleSliceTestMessage.ProtoReflect.Descriptor instead.
func (*DoubleSliceTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleSliceTestMessage) GetMeasurements() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *DoubleSliceTestMessage) GetScientificValues() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.ScientificValues
	}
	return nil
}

func (x *DoubleSliceTestMessage) GetTemperatureReadings() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.TemperatureReadings
	}
	return nil
}

func (x *DoubleSliceTestMessage) GetCoordinates() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

// Dedicated message for testing BytesSliceValue functionality
type BytesSliceTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test various bytes slice configurations with base64 encoding
	DataChunks     []*wrapperspb.BytesValue `protobuf:"bytes,1,rep,name=data_chunks,json=dataChunks,proto3" json:"data_chunks,omitempty"`
	FileContents   []*wrapperspb.BytesValue `protobuf:"bytes,2,rep,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
	HexData        []*wrapperspb.BytesValue `protobuf:"bytes,3,rep,name=hex_data,json=hexData,proto3" json:"hex_data,omitempty"`
	BinaryPayloads []*wrapperspb.BytesValue `protobuf:"bytes,4,rep,name=binary_payloads,json=binaryPayloads,proto3" json:"binary_payloads,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BytesSliceTestMessage) Reset() {
	*x = BytesSliceTestMessage{}
	mi := &file_tests_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesSliceTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesSliceTestMessage) ProtoMessage() {}

func (x *BytesSliceTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesSliceTestMessage.ProtoReflect.Descriptor instead.
func (*BytesSliceTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{4}
}

func (x *BytesSliceTestMessage) GetDataChunks() []*wrapperspb.BytesValue {
	if x != nil {
		return x.DataChunks
	}
	return nil
}

func (x *BytesSliceTestMessage) GetFileContents() []*wrapperspb.BytesValue {
	if x != nil {
		return x.FileContents
	}
	return nil
}

func (x *BytesSliceTestMessage) GetHexData() []*wrapperspb.BytesValue {
	if x != nil {
		return x.HexData
	}
	return nil
}

func (x *BytesSliceTestMessage) GetBinaryPayloads() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BinaryPayloads
	}
	return nil
}

// Dedicated message for testing FloatSlice functionality
type FloatSliceTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test various float slice configurations
	Measurements  []float32 `protobuf:"fixed32,1,rep,packed,name=measurements,proto3" json:"measurements,omitempty"`
	Coordinates2  *float32  `protobuf:"fixed32,2,opt,name=coordinates2,proto3,oneof" json:"coordinates2,omitempty"`
	Temperatures  []float32 `protobuf:"fixed32,3,rep,packed,name=temperatures,proto3" json:"temperatures,omitempty"`
	Percentages   []float32 `protobuf:"fixed32,4,rep,packed,name=percentages,proto3" json:"percentages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatSliceTestMessage) Reset() {
	*x = FloatSliceTestMessage{}
	mi := &file_tests_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatSliceTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatSliceTestMessage) ProtoMessage() {}

func (x *FloatSliceTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatSliceTestMessage.ProtoReflect.Descriptor instead.
func (*FloatSliceTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{5}
}

func (x *FloatSliceTestMessage) GetMeasurements() []float32 {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *FloatSliceTestMessage) GetCoordinates2() float32 {
	if x != nil && x.Coordinates2 != nil {
		return *x.Coordinates2
	}
	return 0
}

func (x *FloatSliceTestMessage) GetTemperatures() []float32 {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

func (x *FloatSliceTestMessage) GetPercentages() []float32 {
	if x != nil {
		return x.Percentages
	}
	return nil
}

// Dedicated message for testing FloatValue wrapper functionality
type FloatValueTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test single FloatValue wrapper type
	SingleValue *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=single_value,json=singleValue,proto3,oneof" json:"single_value,omitempty"`
	// Test FloatValue slice type
	FloatValues []*wrapperspb.FloatValue `protobuf:"bytes,2,rep,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	// Test different FloatValue configurations
	Temperature    *wrapperspb.FloatValue   `protobuf:"bytes,3,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	SensorReadings []*wrapperspb.FloatValue `protobuf:"bytes,4,rep,name=sensor_readings,json=sensorReadings,proto3" json:"sensor_readings,omitempty"`
	Probability    *wrapperspb.FloatValue   `protobuf:"bytes,5,opt,name=probability,proto3,oneof" json:"probability,omitempty"`
	Scores         []*wrapperspb.FloatValue `protobuf:"bytes,6,rep,name=scores,proto3" json:"scores,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FloatValueTestMessage) Reset() {
	*x = FloatValueTestMessage{}
	mi := &file_tests_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatValueTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatValueTestMessage) ProtoMessage() {}

func (x *FloatValueTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatValueTestMessage.ProtoReflect.Descriptor instead.
func (*FloatValueTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{6}
}

func (x *FloatValueTestMessage) GetSingleValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *FloatValueTestMessage) GetFloatValues() []*wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *FloatValueTestMessage) GetTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *FloatValueTestMessage) GetSensorReadings() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SensorReadings
	}
	return nil
}

func (x *FloatValueTestMessage) GetProbability() *wrapperspb.FloatValue {
	if x != nil {
		return x.Probability
	}
	return nil
}

func (x *FloatValueTestMessage) GetScores() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Scores
	}
	return nil
}

// Dedicated message for testing DurationSliceValue functionality
type DurationSliceTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test various duration slice configurations
	Delays           []*durationpb.Duration `protobuf:"bytes,1,rep,name=delays,proto3" json:"delays,omitempty"`
	Intervals        []*durationpb.Duration `protobuf:"bytes,2,rep,name=intervals,proto3" json:"intervals,omitempty"`
	Timeouts         []*durationpb.Duration `protobuf:"bytes,3,rep,name=timeouts,proto3" json:"timeouts,omitempty"`
	PollingIntervals []*durationpb.Duration `protobuf:"bytes,4,rep,name=polling_intervals,json=pollingIntervals,proto3" json:"polling_intervals,omitempty"`
	Deadline         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	OptionalDeadline *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=optional_deadline,json=optionalDeadline,proto3,oneof" json:"optional_deadline,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DurationSliceTestMessage) Reset() {
	*x = DurationSliceTestMessage{}
	mi := &file_tests_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationSliceTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationSliceTestMessage) ProtoMessage() {}

func (x *DurationSliceTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationSliceTestMessage.ProtoReflect.Descriptor instead.
func (*DurationSliceTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{7}
}

func (x *DurationSliceTestMessage) GetDelays() []*durationpb.Duration {
	if x != nil {
		return x.Delays
	}
	return nil
}

func (x *DurationSliceTestMessage) GetIntervals() []*durationpb.Duration {
	if x != nil {
		return x.Intervals
	}
	return nil
}

func (x *DurationSliceTestMessage) GetTimeouts() []*durationpb.Duration {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

func (x *DurationSliceTestMessage) GetPollingIntervals() []*durationpb.Duration {
	if x != nil {
		return x.PollingIntervals
	}
	return nil
}

func (x *DurationSliceTestMessage) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *DurationSliceTestMessage) GetOptionalDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.OptionalDeadline
	}
	return nil
}

type DisabledMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	SimpleMessage *SimpleMessage         `protobuf:"bytes,2,opt,name=simple_message,json=simpleMessage,proto3" json:"simple_message,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisabledMessage) Reset() {
	*x = DisabledMessage{}
	mi := &file_tests_test_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisabledMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisabledMessage) ProtoMessage() {}

func (x *DisabledMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisabledMessage.ProtoReflect.Descriptor instead.
func (*DisabledMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{8}
}

func (x *DisabledMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DisabledMessage) GetSimpleMessage() *SimpleMessage {
	if x != nil {
		return x.SimpleMessage
	}
	return nil
}

func (x *DisabledMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type EmptyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_tests_test_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{9}
}

func (x *EmptyMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EmptyMessage2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyMessage2) Reset() {
	*x = EmptyMessage2{}
	mi := &file_tests_test_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage2) ProtoMessage() {}

func (x *EmptyMessage2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage2.ProtoReflect.Descriptor instead.
func (*EmptyMessage2) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{10}
}

func (x *EmptyMessage2) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type WrapperMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Value2        []string               `protobuf:"bytes,2,rep,name=value2,proto3" json:"value2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WrapperMessage) Reset() {
	*x = WrapperMessage{}
	mi := &file_tests_test_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrapperMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapperMessage) ProtoMessage() {}

func (x *WrapperMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapperMessage.ProtoReflect.Descriptor instead.
func (*WrapperMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{11}
}

func (x *WrapperMessage) GetValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WrapperMessage) GetValue2() []string {
	if x != nil {
		return x.Value2
	}
	return nil
}

// Test message for unexported option
type UnexportedMessageTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SecretKey     string                 `protobuf:"bytes,1,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Timeout       int32                  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnexportedMessageTest) Reset() {
	*x = UnexportedMessageTest{}
	mi := &file_tests_test_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnexportedMessageTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexportedMessageTest) ProtoMessage() {}

func (x *UnexportedMessageTest) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexportedMessageTest.ProtoReflect.Descriptor instead.
func (*UnexportedMessageTest) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{12}
}

func (x *UnexportedMessageTest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *UnexportedMessageTest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// Test message for comprehensive default values
type DefaultValueTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test default values for all numeric types
	Pi             float32    `protobuf:"fixed32,1,opt,name=pi,proto3" json:"pi,omitempty"`
	Euler          float64    `protobuf:"fixed64,2,opt,name=euler,proto3" json:"euler,omitempty"`
	DefaultPort    int32      `protobuf:"varint,3,opt,name=default_port,json=defaultPort,proto3" json:"default_port,omitempty"`
	MaxConnections int64      `protobuf:"varint,4,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	BufferSize     uint32     `protobuf:"varint,5,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	MemoryLimit    uint64     `protobuf:"varint,6,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	DebugMode      *bool      `protobuf:"varint,7,opt,name=debug_mode,json=debugMode,proto3,oneof" json:"debug_mode,omitempty"`
	LogLevel       string     `protobuf:"bytes,8,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	DefaultMode    TestEnum1  `protobuf:"varint,9,opt,name=default_mode,json=defaultMode,proto3,enum=tests.TestEnum1" json:"default_mode,omitempty"`
	DefaultMode2   *TestEnum1 `protobuf:"varint,10,opt,name=default_mode2,json=defaultMode2,proto3,enum=tests.TestEnum1,oneof" json:"default_mode2,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DefaultValueTestMessage) Reset() {
	*x = DefaultValueTestMessage{}
	mi := &file_tests_test_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultValueTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultValueTestMessage) ProtoMessage() {}

func (x *DefaultValueTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultValueTestMessage.ProtoReflect.Descriptor instead.
func (*DefaultValueTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{13}
}

func (x *DefaultValueTestMessage) GetPi() float32 {
	if x != nil {
		return x.Pi
	}
	return 0
}

func (x *DefaultValueTestMessage) GetEuler() float64 {
	if x != nil {
		return x.Euler
	}
	return 0
}

func (x *DefaultValueTestMessage) GetDefaultPort() int32 {
	if x != nil {
		return x.DefaultPort
	}
	return 0
}

func (x *DefaultValueTestMessage) GetMaxConnections() int64 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *DefaultValueTestMessage) GetBufferSize() uint32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (x *DefaultValueTestMessage) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *DefaultValueTestMessage) GetDebugMode() bool {
	if x != nil && x.DebugMode != nil {
		return *x.DebugMode
	}
	return false
}

func (x *DefaultValueTestMessage) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *DefaultValueTestMessage) GetDefaultMode() TestEnum1 {
	if x != nil {
		return x.DefaultMode
	}
	return TestEnum1_TEST_ENUM_UNSPECIFIED
}

func (x *DefaultValueTestMessage) GetDefaultMode2() TestEnum1 {
	if x != nil && x.DefaultMode2 != nil {
		return *x.DefaultMode2
	}
	return TestEnum1_TEST_ENUM_UNSPECIFIED
}

// Test message for StringValue wrapper types
type StringValueTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test single StringValue wrapper type
	SingleValue *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=single_value,json=singleValue,proto3,oneof" json:"single_value,omitempty"`
	// Test StringValue slice type
	StringValues []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	// Test different StringValue configurations
	ConfigPath    *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=config_path,json=configPath,proto3,oneof" json:"config_path,omitempty"`
	IncludePaths  []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=include_paths,json=includePaths,proto3" json:"include_paths,omitempty"`
	Environment   *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=environment,proto3,oneof" json:"environment,omitempty"`
	Tags          []*wrapperspb.StringValue `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringValueTestMessage) Reset() {
	*x = StringValueTestMessage{}
	mi := &file_tests_test_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringValueTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValueTestMessage) ProtoMessage() {}

func (x *StringValueTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValueTestMessage.ProtoReflect.Descriptor instead.
func (*StringValueTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{14}
}

func (x *StringValueTestMessage) GetSingleValue() *wrapperspb.StringValue {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *StringValueTestMessage) GetStringValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *StringValueTestMessage) GetConfigPath() *wrapperspb.StringValue {
	if x != nil {
		return x.ConfigPath
	}
	return nil
}

func (x *StringValueTestMessage) GetIncludePaths() []*wrapperspb.StringValue {
	if x != nil {
		return x.IncludePaths
	}
	return nil
}

func (x *StringValueTestMessage) GetEnvironment() *wrapperspb.StringValue {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *StringValueTestMessage) GetTags() []*wrapperspb.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Test message for integer wrapper types (Int32Value, Int64Value, etc.)
type IntegerValueTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test Int32Value wrapper type
	Int32Value *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
	// Test Int64Value wrapper type
	Int64Value *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
	// Test UInt32Value wrapper type
	Uint32Value *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=uint32_value,json=uint32Value,proto3,oneof" json:"uint32_value,omitempty"`
	// Test UInt64Value wrapper type
	Uint64Value *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=uint64_value,json=uint64Value,proto3,oneof" json:"uint64_value,omitempty"`
	// Test Int32Value slice type
	Int32Values []*wrapperspb.Int32Value `protobuf:"bytes,5,rep,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	// Test Int64Value slice type
	Int64Values   []*wrapperspb.Int64Value `protobuf:"bytes,6,rep,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Float64Values []*wrapperspb.FloatValue `protobuf:"bytes,7,rep,name=float64_values,json=float64Values,proto3" json:"float64_values,omitempty"`
	DoubleValues  []float64                `protobuf:"fixed64,8,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntegerValueTestMessage) Reset() {
	*x = IntegerValueTestMessage{}
	mi := &file_tests_test_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntegerValueTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerValueTestMessage) ProtoMessage() {}

func (x *IntegerValueTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerValueTestMessage.ProtoReflect.Descriptor instead.
func (*IntegerValueTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{15}
}

func (x *IntegerValueTestMessage) GetInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *IntegerValueTestMessage) GetInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *IntegerValueTestMessage) GetUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *IntegerValueTestMessage) GetUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *IntegerValueTestMessage) GetInt32Values() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *IntegerValueTestMessage) GetInt64Values() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *IntegerValueTestMessage) GetFloat64Values() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Float64Values
	}
	return nil
}

func (x *IntegerValueTestMessage) GetDoubleValues() []float64 {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

// Test message for BoolValue wrapper types
type BoolValueTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test single BoolValue wrapper type
	SingleValue *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=single_value,json=singleValue,proto3,oneof" json:"single_value,omitempty"`
	// Test BoolValue slice type
	BoolValues []*wrapperspb.BoolValue `protobuf:"bytes,2,rep,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
	// Test different BoolValue configurations
	EnableFeature  *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=enable_feature,json=enableFeature,proto3,oneof" json:"enable_feature,omitempty"`
	FeatureFlags   []*wrapperspb.BoolValue `protobuf:"bytes,4,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	VerboseLogging *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=verbose_logging,json=verboseLogging,proto3,oneof" json:"verbose_logging,omitempty"`
	DebugOptions   []*wrapperspb.BoolValue `protobuf:"bytes,6,rep,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BoolValueTestMessage) Reset() {
	*x = BoolValueTestMessage{}
	mi := &file_tests_test_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolValueTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValueTestMessage) ProtoMessage() {}

func (x *BoolValueTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValueTestMessage.ProtoReflect.Descriptor instead.
func (*BoolValueTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{16}
}

func (x *BoolValueTestMessage) GetSingleValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *BoolValueTestMessage) GetBoolValues() []*wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValues
	}
	return nil
}

func (x *BoolValueTestMessage) GetEnableFeature() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableFeature
	}
	return nil
}

func (x *BoolValueTestMessage) GetFeatureFlags() []*wrapperspb.BoolValue {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *BoolValueTestMessage) GetVerboseLogging() *wrapperspb.BoolValue {
	if x != nil {
		return x.VerboseLogging
	}
	return nil
}

func (x *BoolValueTestMessage) GetDebugOptions() []*wrapperspb.BoolValue {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

// Test message for comprehensive flag configuration options
type ComprehensiveFlagTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test flags with all configuration options
	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	LegacyToken      string `protobuf:"bytes,3,opt,name=legacy_token,json=legacyToken,proto3" json:"legacy_token,omitempty"`
	ConnectionCount  int32  `protobuf:"varint,4,opt,name=connection_count,json=connectionCount,proto3" json:"connection_count,omitempty"`
	MaxThreads       int32  `protobuf:"varint,5,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	ExperimentalMode bool   `protobuf:"varint,6,opt,name=experimental_mode,json=experimentalMode,proto3" json:"experimental_mode,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ComprehensiveFlagTestMessage) Reset() {
	*x = ComprehensiveFlagTestMessage{}
	mi := &file_tests_test_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComprehensiveFlagTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComprehensiveFlagTestMessage) ProtoMessage() {}

func (x *ComprehensiveFlagTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComprehensiveFlagTestMessage.ProtoReflect.Descriptor instead.
func (*ComprehensiveFlagTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{17}
}

func (x *ComprehensiveFlagTestMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ComprehensiveFlagTestMessage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ComprehensiveFlagTestMessage) GetLegacyToken() string {
	if x != nil {
		return x.LegacyToken
	}
	return ""
}

func (x *ComprehensiveFlagTestMessage) GetConnectionCount() int32 {
	if x != nil {
		return x.ConnectionCount
	}
	return 0
}

func (x *ComprehensiveFlagTestMessage) GetMaxThreads() int32 {
	if x != nil {
		return x.MaxThreads
	}
	return 0
}

func (x *ComprehensiveFlagTestMessage) GetExperimentalMode() bool {
	if x != nil {
		return x.ExperimentalMode
	}
	return false
}

// Test message for nested message configurations with different prefix behaviors
type NestedMessageTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test nested message with prefix
	ServerConfig *SimpleMessage `protobuf:"bytes,1,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
	// Test nested message without prefix
	ClientConfig *SimpleMessage `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
	// Test nested message with custom prefix
	DatabaseConfig *SimpleMessage `protobuf:"bytes,3,opt,name=database_config,json=databaseConfig,proto3" json:"database_config,omitempty"`
	// Test multiple levels of nesting
	DeepConfig    *NestedLevel2Message `protobuf:"bytes,4,opt,name=deep_config,json=deepConfig,proto3" json:"deep_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NestedMessageTestMessage) Reset() {
	*x = NestedMessageTestMessage{}
	mi := &file_tests_test_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedMessageTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessageTestMessage) ProtoMessage() {}

func (x *NestedMessageTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessageTestMessage.ProtoReflect.Descriptor instead.
func (*NestedMessageTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{18}
}

func (x *NestedMessageTestMessage) GetServerConfig() *SimpleMessage {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *NestedMessageTestMessage) GetClientConfig() *SimpleMessage {
	if x != nil {
		return x.ClientConfig
	}
	return nil
}

func (x *NestedMessageTestMessage) GetDatabaseConfig() *SimpleMessage {
	if x != nil {
		return x.DatabaseConfig
	}
	return nil
}

func (x *NestedMessageTestMessage) GetDeepConfig() *NestedLevel2Message {
	if x != nil {
		return x.DeepConfig
	}
	return nil
}

// Helper message for multi-level nesting test
type NestedLevel2Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level2Field   string                 `protobuf:"bytes,1,opt,name=level2_field,json=level2Field,proto3" json:"level2_field,omitempty"`
	NestedSimple  *SimpleMessage         `protobuf:"bytes,2,opt,name=nested_simple,json=nestedSimple,proto3" json:"nested_simple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NestedLevel2Message) Reset() {
	*x = NestedLevel2Message{}
	mi := &file_tests_test_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedLevel2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedLevel2Message) ProtoMessage() {}

func (x *NestedLevel2Message) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedLevel2Message.ProtoReflect.Descriptor instead.
func (*NestedLevel2Message) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{19}
}

func (x *NestedLevel2Message) GetLevel2Field() string {
	if x != nil {
		return x.Level2Field
	}
	return ""
}

func (x *NestedLevel2Message) GetNestedSimple() *SimpleMessage {
	if x != nil {
		return x.NestedSimple
	}
	return nil
}

// Test message for map configurations with different formats
type ComprehensiveMapTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test JSON map format (default)
	JsonLabels map[string]string `protobuf:"bytes,1,rep,name=json_labels,json=jsonLabels,proto3" json:"json_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Test native string-to-string format
	NativeLabels map[string]string `protobuf:"bytes,2,rep,name=native_labels,json=nativeLabels,proto3" json:"native_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Test native string-to-int format with default values
	DefaultCounters map[string]int32 `protobuf:"bytes,3,rep,name=default_counters,json=defaultCounters,proto3" json:"default_counters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Test deprecated map field
	LegacyConfig map[string]string `protobuf:"bytes,4,rep,name=legacy_config,json=legacyConfig,proto3" json:"legacy_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Test hidden map field
	SecretConfig  map[string]string `protobuf:"bytes,5,rep,name=secret_config,json=secretConfig,proto3" json:"secret_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComprehensiveMapTestMessage) Reset() {
	*x = ComprehensiveMapTestMessage{}
	mi := &file_tests_test_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComprehensiveMapTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComprehensiveMapTestMessage) ProtoMessage() {}

func (x *ComprehensiveMapTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComprehensiveMapTestMessage.ProtoReflect.Descriptor instead.
func (*ComprehensiveMapTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{20}
}

func (x *ComprehensiveMapTestMessage) GetJsonLabels() map[string]string {
	if x != nil {
		return x.JsonLabels
	}
	return nil
}

func (x *ComprehensiveMapTestMessage) GetNativeLabels() map[string]string {
	if x != nil {
		return x.NativeLabels
	}
	return nil
}

func (x *ComprehensiveMapTestMessage) GetDefaultCounters() map[string]int32 {
	if x != nil {
		return x.DefaultCounters
	}
	return nil
}

func (x *ComprehensiveMapTestMessage) GetLegacyConfig() map[string]string {
	if x != nil {
		return x.LegacyConfig
	}
	return nil
}

func (x *ComprehensiveMapTestMessage) GetSecretConfig() map[string]string {
	if x != nil {
		return x.SecretConfig
	}
	return nil
}

// Dedicated message for testing TimestampSliceValue functionality
type TimestampSliceTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test various timestamp slice configurations
	EventTimes     []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=event_times,json=eventTimes,proto3" json:"event_times,omitempty"`
	LogTimestamps  []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=log_timestamps,json=logTimestamps,proto3" json:"log_timestamps,omitempty"`
	ScheduledTasks []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=scheduled_tasks,json=scheduledTasks,proto3" json:"scheduled_tasks,omitempty"`
	BackupTimes    []*timestamppb.Timestamp `protobuf:"bytes,4,rep,name=backup_times,json=backupTimes,proto3" json:"backup_times,omitempty"`
	// Test timestamp slice with custom formats
	CustomFormatTimes []*timestamppb.Timestamp `protobuf:"bytes,5,rep,name=custom_format_times,json=customFormatTimes,proto3" json:"custom_format_times,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TimestampSliceTestMessage) Reset() {
	*x = TimestampSliceTestMessage{}
	mi := &file_tests_test_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampSliceTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampSliceTestMessage) ProtoMessage() {}

func (x *TimestampSliceTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampSliceTestMessage.ProtoReflect.Descriptor instead.
func (*TimestampSliceTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{21}
}

func (x *TimestampSliceTestMessage) GetEventTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.EventTimes
	}
	return nil
}

func (x *TimestampSliceTestMessage) GetLogTimestamps() []*timestamppb.Timestamp {
	if x != nil {
		return x.LogTimestamps
	}
	return nil
}

func (x *TimestampSliceTestMessage) GetScheduledTasks() []*timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTasks
	}
	return nil
}

func (x *TimestampSliceTestMessage) GetBackupTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.BackupTimes
	}
	return nil
}

func (x *TimestampSliceTestMessage) GetCustomFormatTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.CustomFormatTimes
	}
	return nil
}

// Dedicated message for testing native repeated bytes functionality
type RepeatedBytesTestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test repeated bytes with base64 encoding
	Base64Chunks [][]byte `protobuf:"bytes,1,rep,name=base64_chunks,json=base64Chunks,proto3" json:"base64_chunks,omitempty"`
	// Test repeated bytes with hex encoding
	HexChunks [][]byte `protobuf:"bytes,2,rep,name=hex_chunks,json=hexChunks,proto3" json:"hex_chunks,omitempty"`
	// Test repeated bytes with default values (base64)
	DefaultBase64 [][]byte `protobuf:"bytes,3,rep,name=default_base64,json=defaultBase64,proto3" json:"default_base64,omitempty"`
	// Test repeated bytes with default values (hex)
	DefaultHex [][]byte `protobuf:"bytes,4,rep,name=default_hex,json=defaultHex,proto3" json:"default_hex,omitempty"`
	// Test repeated bytes without explicit encoding (defaults to base64)
	RawChunks [][]byte `protobuf:"bytes,5,rep,name=raw_chunks,json=rawChunks,proto3" json:"raw_chunks,omitempty"`
	// Test repeated bytes with mixed case hex
	MixedHex [][]byte `protobuf:"bytes,6,rep,name=mixed_hex,json=mixedHex,proto3" json:"mixed_hex,omitempty"`
	// Test repeated bytes with special characters in base64
	SpecialB64    [][]byte `protobuf:"bytes,7,rep,name=special_b64,json=specialB64,proto3" json:"special_b64,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedBytesTestMessage) Reset() {
	*x = RepeatedBytesTestMessage{}
	mi := &file_tests_test_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedBytesTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBytesTestMessage) ProtoMessage() {}

func (x *RepeatedBytesTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBytesTestMessage.ProtoReflect.Descriptor instead.
func (*RepeatedBytesTestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{22}
}

func (x *RepeatedBytesTestMessage) GetBase64Chunks() [][]byte {
	if x != nil {
		return x.Base64Chunks
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetHexChunks() [][]byte {
	if x != nil {
		return x.HexChunks
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetDefaultBase64() [][]byte {
	if x != nil {
		return x.DefaultBase64
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetDefaultHex() [][]byte {
	if x != nil {
		return x.DefaultHex
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetRawChunks() [][]byte {
	if x != nil {
		return x.RawChunks
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetMixedHex() [][]byte {
	if x != nil {
		return x.MixedHex
	}
	return nil
}

func (x *RepeatedBytesTestMessage) GetSpecialB64() [][]byte {
	if x != nil {
		return x.SpecialB64
	}
	return nil
}

var File_tests_test_proto protoreflect.FileDescriptor

const file_tests_test_proto_rawDesc = "" +
	"\n" +
	"\x10tests/test.proto\x12\x05tests\x1a\x11flags/flags.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xd7$\n" +
	"\x0eTestForMessage\x12p\n" +
	"\x05hello\x18\x01 \x01(\x02BZ\x9aIW\n" +
	"U\x12\x05hello\x1a\x01h\"\x14Hello world '\"' flag(\x010\x01:/This flag is deprecated, use --greeting insteadR\x05hello\x12\x82\x01\n" +
	"\x05world\x18\x02 \x01(\tBl\x9aIirg\x12\x05world\"-World flags (can be specified multiple times)0\x01:-This flag is deprecated, use --target insteadR\x05world\x12K\n" +
	"\bgreeting\x18\x03 \x01(\tB/\x9aI,r*\x12\bgreeting\x1a\x01g\"\x1bGreeting message to displayR\bgreeting\x12L\n" +
	"\x05count\x18\x04 \x01(\x05B6\x9aI3\x1a1\x12\x05count\x1a\x01c\"%Number of times to repeat the messageR\x05count\x12B\n" +
	"\averbose\x18\x05 \x01(\bB(\x9aI%j#\x12\averbose\x1a\x01v\"\x15Enable verbose outputR\averbose\x12S\n" +
	"\bverbose2\x18\x06 \x01(\x10B7\x9aI4b2\x12\bverbose2\x1a\x01V\"#Enable verbose output with sfixed64R\bverbose2\x123\n" +
	"\auser_id\x18\a \x01(\x03B\x1a\x9aI\x17\"\x15\x12\auser-id\x1a\x01u\"\aUser IDR\x06userId\x12/\n" +
	"\x04port\x18\b \x01(\rB\x1b\x9aI\x18*\x16\x12\x04port\x1a\x01p\"\vPort numberR\x04port\x121\n" +
	"\x04size\x18\t \x01(\x04B\x1d\x9aI\x1a2\x18\x12\x04size\x1a\x01s\"\rSize in bytesR\x04size\x12J\n" +
	"\vtemperature\x18\n" +
	" \x01(\x11B(\x9aI%:#\x12\vtemperature\x1a\x01t\"\x11Temperature valueR\vtemperature\x12B\n" +
	"\ttimestamp\x18\v \x01(\x12B$\x9aI!B\x1f\x12\ttimestamp\x1a\x01T\"\x0fTimestamp valueR\ttimestamp\x12A\n" +
	"\atimeout\x18\f \x01(\aB'\x9aI$J\"\x12\atimeout\"\x17Timeout in millisecondsR\atimeout\x12L\n" +
	"\tbandwidth\x18\r \x01(\x06B.\x9aI+R)\x12\tbandwidth\"\x1cBandwidth in bits per secondR\tbandwidth\x123\n" +
	"\x06offset\x18\x0e \x01(\x0fB\x1b\x9aI\x18Z\x16\x12\x06offset\"\fOffset valueR\x06offset\x122\n" +
	"\x05ratio\x18\x0f \x01(\x01B\x1c\x9aI\x19\x12\x17\x12\x05ratio\x1a\x01r\"\vRatio valueR\x05ratio\x12k\n" +
	"\x04byte\x18\x10 \x01(\fBR\x9aIOzM\x12\x04byte\x1a\x01b\"\x1cByte data in base64 encoding@\x02J\"0000546573742048656c6c6f2054657874H\x00R\x04byte\x88\x01\x01\x12u\n" +
	"\vconfig_data\x18! \x01(\fBO\x9aILzJ\x12\vconfig-data\x1a\x02cd\"#Configuration data in base64 format@\x01J\x10aGVsbG8gd29ybGQ=H\x01R\n" +
	"configData\x88\x01\x01\x12W\n" +
	"\n" +
	"secret_key\x18\" \x01(\fB3\x9aI0z.\x12\n" +
	"secret-key\x1a\x02sk\"\x18Secret key in hex format(\x01@\x02H\x02R\tsecretKey\x88\x01\x01\x12Z\n" +
	"\vfile_chunks\x18# \x03(\fB9\x9aI6\x8a\x013z1\x12\vfile-chunks\x1a\x02fc\"\x1cFile chunks in base64 format@\x01R\n" +
	"fileChunks\x12T\n" +
	"\n" +
	"hex_chunks\x18$ \x03(\fB5\x9aI2\x8a\x01/z-\x12\n" +
	"hex-chunks\x1a\x02hc\"\x19Data chunks in hex format@\x02R\thexChunks\x12\x9d\x01\n" +
	"\x0fbase64_defaults\x18( \x03(\fBt\x9aIq\x8a\x01nzl\x12\x0fbase64-defaults\x1a\x02bd\"\x1dDefault base64 encoded values@\x01J\x10aGVsbG8gd29ybGQ=J\fdGVzdCBkYXRhJ\x14c2FtcGxlIGNvbnRlbnQ=R\x0ebase64Defaults\x12\xa6\x01\n" +
	"\fhex_defaults\x18) \x03(\fB\x82\x01\x9aI\x7f\x8a\x01|zz\x12\fhex-defaults\x1a\x02hd\"\x1aDefault hex encoded values@\x02J\x1648656c6c6f20576f726c64J\x12546573742044617461J\x1c53616d706c6520436f6e74656e74R\vhexDefaults\x12[\n" +
	"\ttest_enum\x18\x11 \x03(\x0e2\x10.tests.TestEnum1B,\x9aI)\x8a\x01&\x82\x01#\x12\ttest-enum\x1a\x01e\"\x0fTest enum fieldB\x02\x01\x03R\btestEnum\x12\x8c\x01\n" +
	"\x10timeout_duration\x18\x12 \x01(\v2\x19.google.protobuf.DurationBF\x9aIC\x9a\x01@\x12\x10timeout-duration\x1a\x01d\"$Timeout duration (e.g., 30s, 5m, 1h)B\x0330sR\x0ftimeoutDuration\x12O\n" +
	"\fsimple_field\x18\x15 \x01(\v2\x14.tests.SimpleMessageB\x16\x9aI\x13\xaa\x01\x10\b\x01\x12\fsimple-fieldR\vsimpleField\x12n\n" +
	"\x06labels\x18\x16 \x03(\v2!.tests.TestForMessage.LabelsEntryB3\x9aI0\x92\x01-\x12\x06labels\x1a\x01l\"\x1eKey-value labels (JSON format)H\x02R\x06labels\x12{\n" +
	"\bcounters\x18\x17 \x03(\v2#.tests.TestForMessage.CountersEntryB:\x9aI7\x92\x014\x12\bcounters\"(String-to-integer counters (JSON format)R\bcounters\x12\x87\x01\n" +
	"\n" +
	"string_map\x18\x18 \x03(\v2$.tests.TestForMessage.StringMapEntryBB\x9aI?\x92\x01<\x12\n" +
	"string-map\x1a\x02sm\"(String-to-string map using native formatH\x02R\tstringMap\x12\x83\x01\n" +
	"\tint32_map\x18\x19 \x03(\v2#.tests.TestForMessage.Int32MapEntryBA\x9aI>\x92\x01;\x12\tint32-map\x1a\x03i32\"'String-to-int32 map using native formatH\x03R\bint32Map\x12\x83\x01\n" +
	"\tint64_map\x18\x1a \x03(\v2#.tests.TestForMessage.Int64MapEntryBA\x9aI>\x92\x01;\x12\tint64-map\x1a\x03i64\"'String-to-int64 map using native formatH\x03R\bint64Map\x12\x88\x01\n" +
	"\n" +
	"uint32_map\x18\x1b \x03(\v2$.tests.TestForMessage.Uint32MapEntryBC\x9aI@\x92\x01=\x12\n" +
	"uint32-map\x1a\x03u32\"(String-to-uint32 map using native formatH\x03R\tuint32Map\x12\x88\x01\n" +
	"\n" +
	"uint64_map\x18\x1c \x03(\v2$.tests.TestForMessage.Uint64MapEntryBC\x9aI@\x92\x01=\x12\n" +
	"uint64-map\x1a\x03u64\"(String-to-uint64 map using native formatH\x03R\tuint64Map\x12\x93\x01\n" +
	"\fsfixed32_map\x18\x1d \x03(\v2&.tests.TestForMessage.Sfixed32MapEntryBH\x9aIE\x92\x01B\x12\fsfixed32-map\x1a\x04sf32\"*String-to-sfixed32 map using native formatH\x03R\vsfixed32Map\x12\x93\x01\n" +
	"\fsfixed64_map\x18\x1e \x03(\v2&.tests.TestForMessage.Sfixed64MapEntryBH\x9aIE\x92\x01B\x12\fsfixed64-map\x1a\x04sf64\"*String-to-sfixed64 map using native formatH\x03R\vsfixed64Map\x12m\n" +
	"\bjson_map\x18\x1f \x03(\v2\".tests.TestForMessage.JsonMapEntryB.\x9aI+\x92\x01(\x12\bjson-map\x1a\x01j\"\x17Generic JSON map formatH\x01R\ajsonMap\x12j\n" +
	"\x10repeated_strings\x18  \x03(\tB?\x9aI<\x8a\x019r7\x12\x10repeated-strings\x1a\x02rs\"\x1fRepeated strings for comparisonR\x0frepeatedStrings\x12k\n" +
	"\x06delays\x18% \x03(\v2\x19.google.protobuf.DurationB8\x9aI5\x8a\x012\x8a\x01/\x12\x06delays\x1a\x01d\"\"Delay durations (e.g., 1s, 2m, 3h)R\x06delays\x12o\n" +
	"\tintervals\x18& \x03(\v2\x19.google.protobuf.DurationB6\x9aI3\x8a\x010\x8a\x01-\x12\tintervals\x1a\x01i\"\x1dTime intervals between eventsR\tintervals\x12o\n" +
	"\btimeouts\x18' \x03(\v2\x19.google.protobuf.DurationB8\x9aI5\x8a\x012\x8a\x01/\x12\btimeouts\x1a\x01t\" Timeout durations for operationsR\btimeouts\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rCountersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a<\n" +
	"\x0eStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rInt32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a;\n" +
	"\rInt64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a<\n" +
	"\x0eUint32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a<\n" +
	"\x0eUint64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a>\n" +
	"\x10Sfixed32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a>\n" +
	"\x10Sfixed64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a:\n" +
	"\fJsonMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x03\xa8I\x01B\a\n" +
	"\x05_byteB\x0e\n" +
	"\f_config_dataB\r\n" +
	"\v_secret_key\"\xcc\x01\n" +
	"\rSimpleMessage\x12/\n" +
	"\x04name\x18\x01 \x01(\tB\x1b\x9aI\x18r\x16\x12\x04name\"\x0eName parameterR\x04name\x12\x89\x01\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampBN\x9aIK\xa2\x01H\x12\n" +
	"created-at\"\x12Creation timestampB\aRFC3339B\aISO8601J\x142023-01-01T00:00:00ZR\tcreatedAt\"\xd2\a\n" +
	"\x13WrapperValueMessage\x12N\n" +
	"\x04name\x18\x01 \x03(\v2\x1a.google.protobuf.BoolValueB\x1e\x9aI\x1b\x8a\x01\x18j\x16\x12\x04name\"\x0eName parameterR\x04name\x12s\n" +
	"\fdouble_value\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueB-\x9aI*\x12(\x12\fdouble-value\x1a\x02dv\"\x14Double value wrapperH\x00R\vdoubleValue\x88\x01\x01\x12w\n" +
	"\rdouble_values\x18\x03 \x03(\v2\x1c.google.protobuf.DoubleValueB4\x9aI1\x8a\x01.\x12,\x12\rdouble-values\x1a\x03dvs\"\x16Multiple double valuesR\fdoubleValues\x12\x93\x01\n" +
	"\vbytes_value\x18\x04 \x01(\v2\x1b.google.protobuf.BytesValueBP\x9aIMzK\x12\vbytes-value\x1a\x02bv\"$Bytes value wrapper (base64 encoded)@\x01J\x10aGVsbG8gd29ybGQ=H\x01R\n" +
	"bytesValue\x88\x01\x01\x12\x94\x01\n" +
	"\fbytes_values\x18\x05 \x01(\v2\x1b.google.protobuf.BytesValueBT\x9aIQzO\x12\fbytes-values\x1a\x03bvs\"&Multiple bytes values (base64 encoded)@\x01J\x10aGVsbG8gd29ybGQ=R\vbytesValues\x12\x8d\x01\n" +
	"\x10bytes_hex_values\x18\x06 \x03(\v2\x1b.google.protobuf.BytesValueBF\x9aIC\x8a\x01@z>\x12\x10bytes-hex-values\x1a\x03bhx\"#Multiple bytes values (hex encoded)@\x02R\x0ebytesHexValues\x12\x9e\x01\n" +
	"\x11bytes_hex_valuesx\x18\a \x01(\v2\x1b.google.protobuf.BytesValueBU\x9aIRzP\x12\x10bytes-hex-values\x1a\x03bhx\"#Multiple bytes values (hex encoded)@\x01J\x10aGVsbG8gd29ybGQ=R\x0fbytesHexValuesxB\x0f\n" +
	"\r_double_valueB\x0e\n" +
	"\f_bytes_value\"\xea\x04\n" +
	"\x16DoubleSliceTestMessage\x12\x96\x01\n" +
	"\fmeasurements\x18\x01 \x03(\v2\x1c.google.protobuf.DoubleValueBT\x9aIQ\x8a\x01N\x12L\x12\fmeasurements\x1a\x01m\"9Scientific measurements (e.g., 3.14159, 2.71828, 1.41421)R\fmeasurements\x12\x9f\x01\n" +
	"\x11scientific_values\x18\x02 \x03(\v2\x1c.google.protobuf.DoubleValueBT\x9aIQ\x8a\x01N\x12L\x12\x11scientific-values\x1a\x02sv\"3Scientific notation values (e.g., 1.23e-4, 5.67e+8)R\x10scientificValues\x12\x93\x01\n" +
	"\x14temperature_readings\x18\x03 \x03(\v2\x1c.google.protobuf.DoubleValueBB\x9aI?\x8a\x01<\x12:\x12\x14temperature-readings\x1a\x01t\"\x1fTemperature readings in CelsiusR\x13temperatureReadings\x12z\n" +
	"\vcoordinates\x18\x04 \x03(\v2\x1c.google.protobuf.DoubleValueB:\x9aI7\x8a\x014\x122\x12\vcoordinates\x1a\x01c\" GPS coordinates (lat, lon pairs)R\vcoordinates:\x03\xa8I\x01\"\x8b\x04\n" +
	"\x15BytesSliceTestMessage\x12w\n" +
	"\vdata_chunks\x18\x01 \x03(\v2\x1b.google.protobuf.BytesValueB9\x9aI6\x8a\x013z1\x12\vdata-chunks\x1a\x02dc\"\x1cData chunks in base64 format@\x01R\n" +
	"dataChunks\x12\x7f\n" +
	"\rfile_contents\x18\x02 \x03(\v2\x1b.google.protobuf.BytesValueB=\x9aI:\x8a\x017z5\x12\rfile-contents\x1a\x02fc\"\x1eFile contents in base64 format@\x01R\ffileContents\x12l\n" +
	"\bhex_data\x18\x03 \x03(\v2\x1b.google.protobuf.BytesValueB4\x9aI1\x8a\x01.z,\x12\bhex-data\x1a\x02hd\"\x1aData in hexadecimal format@\x02R\ahexData\x12\x84\x01\n" +
	"\x0fbinary_payloads\x18\x04 \x03(\v2\x1b.google.protobuf.BytesValueB>\x9aI;\x8a\x018z6\x12\x0fbinary-payloads\x1a\x02bp\"\x1dBinary payloads in hex format@\x02R\x0ebinaryPayloads:\x03\xa8I\x01\"\xbd\x03\n" +
	"\x15FloatSliceTestMessage\x12o\n" +
	"\fmeasurements\x18\x01 \x03(\x02BK\x9aIH\x8a\x01E\n" +
	"C\x12\fmeasurements\x1a\x01m\"0Scientific measurements (e.g., 3.14, 2.71, 1.41)R\fmeasurements\x12_\n" +
	"\fcoordinates2\x18\x02 \x01(\x02B6\x9aI3\n" +
	"1\x12\vcoordinates\x1a\x01c\"\x1fGPS coordinates in float formatH\x00R\fcoordinates2\x88\x01\x01\x12^\n" +
	"\ftemperatures\x18\x03 \x03(\x02B:\x9aI7\x8a\x014\n" +
	"2\x12\ftemperatures\x1a\x01t\"\x1fTemperature readings in CelsiusR\ftemperatures\x12\\\n" +
	"\vpercentages\x18\x04 \x03(\x02B:\x9aI7\x8a\x014\n" +
	"2\x12\vpercentages\x1a\x01p\" Percentage values (0.0 to 100.0)R\vpercentages:\x03\xa8I\x01B\x0f\n" +
	"\r_coordinates2\"\xa1\x06\n" +
	"\x15FloatValueTestMessage\x12x\n" +
	"\fsingle_value\x18\x01 \x01(\v2\x1b.google.protobuf.FloatValueB3\x9aI0\n" +
	".\x12\fsingle-value\x1a\x02sv\"\x1aSingle float value wrapperH\x00R\vsingleValue\x88\x01\x01\x12\x82\x01\n" +
	"\ffloat_values\x18\x02 \x03(\v2\x1b.google.protobuf.FloatValueBB\x9aI?\x8a\x01<\n" +
	":\x12\ffloat-values\x1a\x03fvs\"%Multiple FloatValue wrapper instancesR\vfloatValues\x12t\n" +
	"\vtemperature\x18\x03 \x01(\v2\x1b.google.protobuf.FloatValueB0\x9aI-\n" +
	"+\x12\vtemperature\x1a\x04temp\"\x16Temperature in CelsiusH\x01R\vtemperature\x88\x01\x01\x12}\n" +
	"\x0fsensor_readings\x18\x04 \x03(\v2\x1b.google.protobuf.FloatValueB7\x9aI4\x8a\x011\n" +
	"/\x12\x0fsensor-readings\x1a\x02sr\"\x18Multiple sensor readingsR\x0esensorReadings\x12|\n" +
	"\vprobability\x18\x05 \x01(\v2\x1b.google.protobuf.FloatValueB8\x9aI5\n" +
	"3\x12\vprobability\x1a\x04prob\"\x1eProbability value (0.0 to 1.0)H\x02R\vprobability\x88\x01\x01\x12`\n" +
	"\x06scores\x18\x06 \x03(\v2\x1b.google.protobuf.FloatValueB+\x9aI(\x8a\x01%\n" +
	"#\x12\x06scores\x1a\x02sc\"\x15Multiple score valuesR\x06scores:\x03\xa8I\x01B\x0f\n" +
	"\r_single_valueB\x0e\n" +
	"\f_temperatureB\x0e\n" +
	"\f_probability\"\x9b\x06\n" +
	"\x18DurationSliceTestMessage\x12k\n" +
	"\x06delays\x18\x01 \x03(\v2\x19.google.protobuf.DurationB8\x9aI5\x8a\x012\x8a\x01/\x12\x06delays\x1a\x01d\"\"Delay durations (e.g., 1s, 2m, 3h)R\x06delays\x12\x86\x01\n" +
	"\tintervals\x18\x02 \x03(\v2\x19.google.protobuf.DurationBM\x9aIJ\x8a\x01G\x8a\x01D\x12\tintervals\x1a\x01i\"4Time intervals between events (e.g., 500ms, 10s, 5m)R\tintervals\x12\x83\x01\n" +
	"\btimeouts\x18\x03 \x03(\v2\x19.google.protobuf.DurationBL\x9aII\x8a\x01F\x8a\x01C\x12\btimeouts\x1a\x01t\"4Timeout durations for operations (e.g., 30s, 5m, 1h)R\btimeouts\x12\x9f\x01\n" +
	"\x11polling_intervals\x18\x04 \x03(\v2\x19.google.protobuf.DurationBW\x9aIT\x8a\x01Q\x8a\x01N\x12\x11polling-intervals\x1a\x01p\"6Polling intervals for monitoring (e.g., 100ms, 5s, 1m)R\x10pollingIntervals\x12X\n" +
	"\bdeadline\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB \x9aI\x1d\xa2\x01\x1a\"\x0edeadline usageB\x03abcJ\x03nowR\bdeadline\x12l\n" +
	"\x11optional_deadline\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x1e\x9aI\x1b\xa2\x01\x18\"\x11optional_deadlineB\x03abcH\x00R\x10optionalDeadline\x88\x01\x01:\x03\xa8I\x01B\x14\n" +
	"\x12_optional_deadline\"\x80\x02\n" +
	"\x0fDisabledMessage\x12B\n" +
	"\x05value\x18\x01 \x01(\tB,\x9aI)r'\x12\x05value\"\x1eThis should not appear in helpR\x05value\x12V\n" +
	"\x0esimple_message\x18\x02 \x01(\v2\x14.tests.SimpleMessageB\x19\x9aI\x16\xaa\x01\x13\b\x01\x12\x0fsimple-message6R\rsimpleMessage\x12L\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x11\x9aI\x0e\xa2\x01\v\x12\x04hackB\x03abcR\tcreatedAt:\x03\x98I\x01\")\n" +
	"\fEmptyMessage\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value:\x03\xa8I\x01\"%\n" +
	"\rEmptyMessage2\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\xb1\x01\n" +
	"\x0eWrapperMessage\x12K\n" +
	"\x05value\x18\x01 \x01(\v2\x1b.google.protobuf.FloatValueB\x13\x9aI\x10\n" +
	"\x0e\x12\x05value\"\x05helloH\x00R\x05value\x88\x01\x01\x12H\n" +
	"\x06value2\x18\x02 \x03(\tB0\x9aI-\x8a\x01*r(\x12\x06value2\"\x1eThis should not appear in helpR\x06value2B\b\n" +
	"\x06_value\"\xb8\x01\n" +
	"\x15UnexportedMessageTest\x12L\n" +
	"\n" +
	"secret_key\x18\x01 \x01(\tB-\x9aI*r(\x12\n" +
	"secret-key\"\x18Secret configuration key(\x01R\tsecretKey\x12I\n" +
	"\atimeout\x18\x02 \x01(\x05B/\x9aI,\x1a*\x12\atimeout\"\x1dConnection timeout in seconds@\x1eR\atimeout:\x06\xa0I\x01\xa8I\x01\"\xe9\x06\n" +
	"\x17DefaultValueTestMessage\x121\n" +
	"\x02pi\x18\x01 \x01(\x02B!\x9aI\x1e\n" +
	"\x1c\x12\x02pi\"\x11Pi constant valueE\xd0\x0fI@R\x02pi\x12;\n" +
	"\x05euler\x18\x02 \x01(\x01B%\x9aI\"\x12 \x12\x05euler\"\x0eEuler's numberA\x90\xf7\xaa\x95\t\xbf\x05@R\x05euler\x12N\n" +
	"\fdefault_port\x18\x03 \x01(\x05B+\x9aI(\x1a&\x12\fdefault-port\"\x13Default server port@\x90?R\vdefaultPort\x12_\n" +
	"\x0fmax_connections\x18\x04 \x01(\x03B6\x9aI3\"1\x12\x0fmax-connections\"\x1bMaximum allowed connections@\xe8\aR\x0emaxConnections\x12L\n" +
	"\vbuffer_size\x18\x05 \x01(\rB+\x9aI(*&\x12\vbuffer-size\"\x14Buffer size in bytes@\x80 R\n" +
	"bufferSize\x12S\n" +
	"\fmemory_limit\x18\x06 \x01(\x04B0\x9aI-2+\x12\fmemory-limit\"\x15Memory limit in bytes@\x80\x80\x80\x80\x04R\vmemoryLimit\x12J\n" +
	"\n" +
	"debug_mode\x18\a \x01(\bB&\x9aI#j!\x12\n" +
	"debug-mode\"\x11Enable debug mode@\x01H\x00R\tdebugMode\x88\x01\x01\x12F\n" +
	"\tlog_level\x18\b \x01(\tB)\x9aI&r$\x12\tlog-level\"\x11Default log levelB\x04infoR\blogLevel\x12c\n" +
	"\fdefault_mode\x18\t \x01(\x0e2\x10.tests.TestEnum1B.\x9aI+\x82\x01(\x12\fdefault-mode\"\x16Default operation mode@\x01R\vdefaultMode\x12k\n" +
	"\rdefault_mode2\x18\n" +
	" \x01(\x0e2\x10.tests.TestEnum1B/\x9aI,\x82\x01)\x12\rdefault-mode1\"\x16Default operation mode@\x01H\x01R\fdefaultMode2\x88\x01\x01:\x03\xa8I\x01B\r\n" +
	"\v_debug_modeB\x10\n" +
	"\x0e_default_mode2\"\xd4\x06\n" +
	"\x16StringValueTestMessage\x12\x8a\x01\n" +
	"\fsingle_value\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueBD\x9aIAr?\x12\fsingle-value\x1a\x02sv\"\x1bSingle string value wrapperB\x0edefault-singleH\x00R\vsingleValue\x88\x01\x01\x12\x87\x01\n" +
	"\rstring_values\x18\x02 \x03(\v2\x1c.google.protobuf.StringValueBD\x9aIA\x8a\x01>r<\x12\rstring-values\x1a\x03svs\"&Multiple StringValue wrapper instancesR\fstringValues\x12\x86\x01\n" +
	"\vconfig_path\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueBB\x9aI?r=\x12\vconfig-path\x1a\x03cfg\"\x17Configuration file pathB\x10/etc/config.yamlH\x01R\n" +
	"configPath\x88\x01\x01\x12\x80\x01\n" +
	"\rinclude_paths\x18\x04 \x03(\v2\x1c.google.protobuf.StringValueB=\x9aI:\x8a\x017r5\x12\rinclude-paths\x1a\x03inc\"\x1fInclude paths for configurationR\fincludePaths\x12z\n" +
	"\venvironment\x18\x05 \x01(\v2\x1c.google.protobuf.StringValueB5\x9aI2r0\x12\venvironment\x1a\x03env\"\x10Environment nameB\n" +
	"productionH\x02R\venvironment\x88\x01\x01\x12e\n" +
	"\x04tags\x18\x06 \x03(\v2\x1c.google.protobuf.StringValueB3\x9aI0\x8a\x01-r+\x12\x04tags\x1a\x01t\" Multiple tags for categorizationR\x04tags:\x03\xa8I\x01B\x0f\n" +
	"\r_single_valueB\x0e\n" +
	"\f_config_pathB\x0e\n" +
	"\f_environment\"\xe7\b\n" +
	"\x17IntegerValueTestMessage\x12q\n" +
	"\vint32_value\x18\x01 \x01(\v2\x1b.google.protobuf.Int32ValueB.\x9aI+\x1a)\x12\vint32-value\x1a\x03i32\"\x13Int32 value wrapper@*H\x00R\n" +
	"int32Value\x88\x01\x01\x12y\n" +
	"\vint64_value\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB6\x9aI3\"1\x12\vint64-value\x1a\x03i64\"\x13Int64 value wrapper@\xff\xff\xff\xff\xff\xff\xff\xff\x7fH\x01R\n" +
	"int64Value\x88\x01\x01\x12v\n" +
	"\fuint32_value\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueB0\x9aI-*+\x12\fuint32-value\x1a\x03u32\"\x14UInt32 value wrapper@dH\x02R\vuint32Value\x88\x01\x01\x12\x7f\n" +
	"\fuint64_value\x18\x04 \x01(\v2\x1c.google.protobuf.UInt64ValueB9\x9aI624\x12\fuint64-value\x1a\x03u64\"\x14UInt64 value wrapper@\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01H\x03R\vuint64Value\x88\x01\x01\x12\x84\x01\n" +
	"\fint32_values\x18\x05 \x03(\v2\x1b.google.protobuf.Int32ValueBD\x9aIA\x8a\x01>\x1a<\x12\fint32-values\x1a\x04i32s\"&Multiple Int32 value wrapper instancesR\vint32Values\x12\x88\x01\n" +
	"\fint64_values\x18\x06 \x03(\v2\x1b.google.protobuf.Int64ValueBH\x9aIE\x8a\x01B\"@\x12\fint64-values\x1a\x04i64s\"&Multiple Int64 value wrapper instancesB\x02\x01\x02R\vint64Values\x12\x92\x01\n" +
	"\x0efloat64_values\x18\a \x03(\v2\x1b.google.protobuf.FloatValueBN\x9aIK\x8a\x01H\n" +
	"F\x12\rint64-valuesx\x1a\x04i64s\"%Multiple FloatValue wrapper instancesB\b\x00\x00\x80?\x00\x00\x00@R\rfloat64Values\x12w\n" +
	"\rdouble_values\x18\b \x03(\x01BR\x9aIO\x8a\x01L\x12J\x12\x0edouble-valuesx\x1a\x05i64sx\"\x1fMultiple double value instancesB\x10\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@R\fdoubleValues:\x03\xa8I\x01B\x0e\n" +
	"\f_int32_valueB\x0e\n" +
	"\f_int64_valueB\x0f\n" +
	"\r_uint32_valueB\x0f\n" +
	"\r_uint64_value\"\xcc\x06\n" +
	"\x14BoolValueTestMessage\x12{\n" +
	"\fsingle_value\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueB7\x9aI4j2\x12\fsingle-value\x1a\x02sv\"\x1cSingle boolean value wrapper@\x01H\x00R\vsingleValue\x88\x01\x01\x12}\n" +
	"\vbool_values\x18\x02 \x03(\v2\x1a.google.protobuf.BoolValueB@\x9aI=\x8a\x01:j8\x12\vbool-values\x1a\x03bvs\"$Multiple BoolValue wrapper instancesR\n" +
	"boolValues\x12\x82\x01\n" +
	"\x0eenable_feature\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueB:\x9aI7j5\x12\x0eenable-feature\x1a\x04feat\"\x1bEnable experimental feature@\x00H\x01R\renableFeature\x88\x01\x01\x12t\n" +
	"\rfeature_flags\x18\x04 \x03(\v2\x1a.google.protobuf.BoolValueB3\x9aI0\x8a\x01-j+\x12\rfeature-flags\x1a\x02ff\"\x16Multiple feature flagsR\ffeatureFlags\x12\x83\x01\n" +
	"\x0fverbose_logging\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueB9\x9aI6j4\x12\x0fverbose-logging\x1a\averbose\"\x16Enable verbose logging@\x00H\x02R\x0everboseLogging\x88\x01\x01\x12z\n" +
	"\rdebug_options\x18\x06 \x03(\v2\x1a.google.protobuf.BoolValueB9\x9aI6\x8a\x013j1\x12\rdebug-options\x1a\x03dbg\"\x1bMultiple debug option flagsR\fdebugOptions:\x03\xa8I\x01B\x0f\n" +
	"\r_single_valueB\x11\n" +
	"\x0f_enable_featureB\x12\n" +
	"\x10_verbose_logging\"\x86\x05\n" +
	"\x1cComprehensiveFlagTestMessage\x12R\n" +
	"\busername\x18\x01 \x01(\tB6\x9aI3r1\x12\busername\x1a\x01u\"\x1bUsername for authenticationB\x05adminR\busername\x12M\n" +
	"\bpassword\x18\x02 \x01(\tB1\x9aI.r,\x12\bpassword\x1a\x01p\"\x1bPassword for authentication(\x01R\bpassword\x12p\n" +
	"\flegacy_token\x18\x03 \x01(\tBM\x9aIJrH\x12\flegacy-token\x1a\x02lt\"\x1bLegacy authentication token0\x01:\x15Use --api-key insteadR\vlegacyToken\x12j\n" +
	"\x10connection_count\x18\x04 \x01(\x05B?\x9aI<\x1a:\x12\x10connection-count\x1a\x02cc\" Number of concurrent connections@\n" +
	"R\x0fconnectionCount\x12r\n" +
	"\vmax_threads\x18\x05 \x01(\x05BQ\x9aIN\x1aL\x12\vmax-threads\x1a\x02mt\"\x19Maximum number of threads0\x01:\x1aUse --worker-count instead@dR\n" +
	"maxThreads\x12l\n" +
	"\x11experimental_mode\x18\x06 \x01(\bB?\x9aI<j:\x12\x11experimental-mode\x1a\x03exp\"\x1cEnable experimental features(\x01@\x00R\x10experimentalMode:\x03\xa8I\x01\"\xca\x02\n" +
	"\x18NestedMessageTestMessage\x12K\n" +
	"\rserver_config\x18\x01 \x01(\v2\x14.tests.SimpleMessageB\x10\x9aI\r\xaa\x01\n" +
	"\b\x01\x12\x06serverR\fserverConfig\x12C\n" +
	"\rclient_config\x18\x02 \x01(\v2\x14.tests.SimpleMessageB\b\x9aI\x05\xaa\x01\x02\b\x01R\fclientConfig\x12K\n" +
	"\x0fdatabase_config\x18\x03 \x01(\v2\x14.tests.SimpleMessageB\f\x9aI\t\xaa\x01\x06\b\x01\x12\x02dbR\x0edatabaseConfig\x12J\n" +
	"\vdeep_config\x18\x04 \x01(\v2\x1a.tests.NestedLevel2MessageB\r\x9aI\n" +
	"\xaa\x01\a\b\x01\x12\x03appR\n" +
	"deepConfig:\x03\xa8I\x01\"\xb5\x01\n" +
	"\x13NestedLevel2Message\x12L\n" +
	"\flevel2_field\x18\x01 \x01(\tB)\x9aI&r$\x12\flevel2-field\"\x14Level 2 nested fieldR\vlevel2Field\x12K\n" +
	"\rnested_simple\x18\x02 \x01(\v2\x14.tests.SimpleMessageB\x10\x9aI\r\xaa\x01\n" +
	"\b\x01\x12\x06nestedR\fnestedSimple:\x03\xa8I\x01\"\x83\t\n" +
	"\x1bComprehensiveMapTestMessage\x12\x85\x01\n" +
	"\vjson_labels\x18\x01 \x03(\v22.tests.ComprehensiveMapTestMessage.JsonLabelsEntryB0\x9aI-\x92\x01*\x12\vjson-labels\x1a\x02jl\"\x15Labels in JSON formatH\x01R\n" +
	"jsonLabels\x12\x8f\x01\n" +
	"\rnative_labels\x18\x02 \x03(\v24.tests.ComprehensiveMapTestMessage.NativeLabelsEntryB4\x9aI1\x92\x01.\x12\rnative-labels\x1a\x02nl\"\x17Labels in native formatH\x02R\fnativeLabels\x12\xba\x01\n" +
	"\x10default_counters\x18\x03 \x03(\v27.tests.ComprehensiveMapTestMessage.DefaultCountersEntryBV\x9aIS\x92\x01P\x12\x10default-counters\x1a\x02dc\"\x16Default counter valuesB\x1e{\"requests\": 100, \"errors\": 0}H\x03R\x0fdefaultCounters\x12\xac\x01\n" +
	"\rlegacy_config\x18\x04 \x03(\v24.tests.ComprehensiveMapTestMessage.LegacyConfigEntryBQ\x9aIN\x92\x01K\x12\rlegacy-config\x1a\x02lc\"\x18Legacy configuration map0\x01:\x18Use --new-config insteadH\x01R\flegacyConfig\x12\x92\x01\n" +
	"\rsecret_config\x18\x05 \x03(\v24.tests.ComprehensiveMapTestMessage.SecretConfigEntryB7\x9aI4\x92\x011\x12\rsecret-config\x1a\x02sc\"\x18Secret configuration map(\x01H\x01R\fsecretConfig\x1a=\n" +
	"\x0fJsonLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11NativeLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aB\n" +
	"\x14DefaultCountersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a?\n" +
	"\x11LegacyConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11SecretConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x03\xa8I\x01\"\xb0\x06\n" +
	"\x19TimestampSliceTestMessage\x12\xa5\x01\n" +
	"\vevent_times\x18\x01 \x03(\v2\x1a.google.protobuf.TimestampBh\x9aIe\x8a\x01b\x92\x01_\x12\vevent-times\x1a\x02et\"CEvent timestamps (e.g., 2023-01-01T00:00:00Z, 2023-12-31T23:59:59Z)B\aRFC3339R\n" +
	"eventTimes\x12\x91\x01\n" +
	"\x0elog_timestamps\x18\x02 \x03(\v2\x1a.google.protobuf.TimestampBN\x9aIK\x8a\x01H\x92\x01E\x12\x0elog-timestamps\x1a\x02lt\"&Log entry timestamps in RFC3339 formatB\aRFC3339R\rlogTimestamps\x12\x8c\x01\n" +
	"\x0fscheduled_tasks\x18\x03 \x03(\v2\x1a.google.protobuf.TimestampBG\x9aID\x8a\x01A\x92\x01>\x12\x0fscheduled-tasks\x1a\x02st\"\x1eScheduled task execution timesB\aRFC3339R\x0escheduledTasks\x12\x9c\x01\n" +
	"\fbackup_times\x18\x04 \x03(\v2\x1a.google.protobuf.TimestampB]\x9aIZ\x8a\x01W\x92\x01T\x12\fbackup-times\x1a\x02bt\"7Backup schedule timestamps (e.g., 2024-01-01T02:00:00Z)B\aRFC3339R\vbackupTimes\x12\xa3\x01\n" +
	"\x13custom_format_times\x18\x05 \x03(\v2\x1a.google.protobuf.TimestampBW\x9aIT\x8a\x01Q\x92\x01N\x12\x13custom-format-times\x1a\x03cft\"\x18Custom format timestampsB\aRFC3339B\aISO8601B\x06RFC822R\x11customFormatTimes:\x03\xa8I\x01\"\xfa\x06\n" +
	"\x18RepeatedBytesTestMessage\x12a\n" +
	"\rbase64_chunks\x18\x01 \x03(\fB<\x9aI9\x8a\x016z4\x12\rbase64-chunks\x1a\x03b64\"\x1cData chunks in base64 format@\x01R\fbase64Chunks\x12T\n" +
	"\n" +
	"hex_chunks\x18\x02 \x03(\fB5\x9aI2\x8a\x01/z-\x12\n" +
	"hex-chunks\x1a\x02hx\"\x19Data chunks in hex format@\x02R\thexChunks\x12\x9c\x01\n" +
	"\x0edefault_base64\x18\x03 \x03(\fBu\x9aIr\x8a\x01ozm\x12\x0edefault-base64\x1a\x04db64\"\x1dDefault base64 encoded values@\x01J\x10SGVsbG8gV29ybGQ=J\fVGVzdCBEYXRhJ\x14U2FtcGxlIENvbnRlbnQ=R\rdefaultBase64\x12\xa4\x01\n" +
	"\vdefault_hex\x18\x04 \x03(\fB\x82\x01\x9aI\x7f\x8a\x01|zz\x12\vdefault-hex\x1a\x03dhx\"\x1aDefault hex encoded values@\x02J\x1648656c6c6f20576f726c64J\x12546573742044617461J\x1c53616d706c6520436f6e74656e74R\n" +
	"defaultHex\x12]\n" +
	"\n" +
	"raw_chunks\x18\x05 \x03(\fB>\x9aI;\x8a\x018z6\x12\n" +
	"raw-chunks\x1a\x02rc\"$Raw data chunks (defaults to base64)R\trawChunks\x12u\n" +
	"\tmixed_hex\x18\x06 \x03(\fBX\x9aIU\x8a\x01RzP\x12\tmixed-hex\x1a\x02mh\"\x13Mixed case hex data@\x02J\faBc123DeF456J\f789AbCdE0123J\ffFeEdDcCbBaAR\bmixedHex\x12\x83\x01\n" +
	"\vspecial_b64\x18\a \x03(\fBb\x9aI_\x8a\x01\\zZ\x12\vspecial-b64\x1a\x04sb64\"\x1dSpecial character base64 data@\x01J\fw6TDtsO8w4Q=J\b8J+YgA==J\fw4PDoMOgw6E=R\n" +
	"specialB64:\x03\xa8I\x01*~\n" +
	"\tTestEnum1\x12\x19\n" +
	"\x15TEST_ENUM_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10TEST_ENUM_VALUE1\x10\x01\x12\x14\n" +
	"\x10TEST_ENUM_VALUE2\x10\x02\x12\x14\n" +
	"\x10TEST_ENUM_VALUE3\x10\x03\x12\x14\n" +
	"\x10test_enum_value4\x10\x04B2Z0github.com/kunstack/protoc-gen-flags/tests;testsb\x06proto3"

var (
	file_tests_test_proto_rawDescOnce sync.Once
	file_tests_test_proto_rawDescData []byte
)

func file_tests_test_proto_rawDescGZIP() []byte {
	file_tests_test_proto_rawDescOnce.Do(func() {
		file_tests_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tests_test_proto_rawDesc), len(file_tests_test_proto_rawDesc)))
	})
	return file_tests_test_proto_rawDescData
}

var file_tests_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tests_test_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_tests_test_proto_goTypes = []any{
	(TestEnum1)(0),                       // 0: tests.TestEnum1
	(*TestForMessage)(nil),               // 1: tests.TestForMessage
	(*SimpleMessage)(nil),                // 2: tests.SimpleMessage
	(*WrapperValueMessage)(nil),          // 3: tests.WrapperValueMessage
	(*DoubleSliceTestMessage)(nil),       // 4: tests.DoubleSliceTestMessage
	(*BytesSliceTestMessage)(nil),        // 5: tests.BytesSliceTestMessage
	(*FloatSliceTestMessage)(nil),        // 6: tests.FloatSliceTestMessage
	(*FloatValueTestMessage)(nil),        // 7: tests.FloatValueTestMessage
	(*DurationSliceTestMessage)(nil),     // 8: tests.DurationSliceTestMessage
	(*DisabledMessage)(nil),              // 9: tests.DisabledMessage
	(*EmptyMessage)(nil),                 // 10: tests.EmptyMessage
	(*EmptyMessage2)(nil),                // 11: tests.EmptyMessage2
	(*WrapperMessage)(nil),               // 12: tests.WrapperMessage
	(*UnexportedMessageTest)(nil),        // 13: tests.UnexportedMessageTest
	(*DefaultValueTestMessage)(nil),      // 14: tests.DefaultValueTestMessage
	(*StringValueTestMessage)(nil),       // 15: tests.StringValueTestMessage
	(*IntegerValueTestMessage)(nil),      // 16: tests.IntegerValueTestMessage
	(*BoolValueTestMessage)(nil),         // 17: tests.BoolValueTestMessage
	(*ComprehensiveFlagTestMessage)(nil), // 18: tests.ComprehensiveFlagTestMessage
	(*NestedMessageTestMessage)(nil),     // 19: tests.NestedMessageTestMessage
	(*NestedLevel2Message)(nil),          // 20: tests.NestedLevel2Message
	(*ComprehensiveMapTestMessage)(nil),  // 21: tests.ComprehensiveMapTestMessage
	(*TimestampSliceTestMessage)(nil),    // 22: tests.TimestampSliceTestMessage
	(*RepeatedBytesTestMessage)(nil),     // 23: tests.RepeatedBytesTestMessage
	nil,                                  // 24: tests.TestForMessage.LabelsEntry
	nil,                                  // 25: tests.TestForMessage.CountersEntry
	nil,                                  // 26: tests.TestForMessage.StringMapEntry
	nil,                                  // 27: tests.TestForMessage.Int32MapEntry
	nil,                                  // 28: tests.TestForMessage.Int64MapEntry
	nil,                                  // 29: tests.TestForMessage.Uint32MapEntry
	nil,                                  // 30: tests.TestForMessage.Uint64MapEntry
	nil,                                  // 31: tests.TestForMessage.Sfixed32MapEntry
	nil,                                  // 32: tests.TestForMessage.Sfixed64MapEntry
	nil,                                  // 33: tests.TestForMessage.JsonMapEntry
	nil,                                  // 34: tests.ComprehensiveMapTestMessage.JsonLabelsEntry
	nil,                                  // 35: tests.ComprehensiveMapTestMessage.NativeLabelsEntry
	nil,                                  // 36: tests.ComprehensiveMapTestMessage.DefaultCountersEntry
	nil,                                  // 37: tests.ComprehensiveMapTestMessage.LegacyConfigEntry
	nil,                                  // 38: tests.ComprehensiveMapTestMessage.SecretConfigEntry
	(*durationpb.Duration)(nil),          // 39: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 40: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),         // 41: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil),       // 42: google.protobuf.DoubleValue
	(*wrapperspb.BytesValue)(nil),        // 43: google.protobuf.BytesValue
	(*wrapperspb.FloatValue)(nil),        // 44: google.protobuf.FloatValue
	(*wrapperspb.StringValue)(nil),       // 45: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 46: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),        // 47: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),       // 48: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),       // 49: google.protobuf.UInt64Value
}
var file_tests_test_proto_depIdxs = []int32{
	0,  // 0: tests.TestForMessage.test_enum:type_name -> tests.TestEnum1
	39, // 1: tests.TestForMessage.timeout_duration:type_name -> google.protobuf.Duration
	2,  // 2: tests.TestForMessage.simple_field:type_name -> tests.SimpleMessage
	24, // 3: tests.TestForMessage.labels:type_name -> tests.TestForMessage.LabelsEntry
	25, // 4: tests.TestForMessage.counters:type_name -> tests.TestForMessage.CountersEntry
	26, // 5: tests.TestForMessage.string_map:type_name -> tests.TestForMessage.StringMapEntry
	27, // 6: tests.TestForMessage.int32_map:type_name -> tests.TestForMessage.Int32MapEntry
	28, // 7: tests.TestForMessage.int64_map:type_name -> tests.TestForMessage.Int64MapEntry
	29, // 8: tests.TestForMessage.uint32_map:type_name -> tests.TestForMessage.Uint32MapEntry
	30, // 9: tests.TestForMessage.uint64_map:type_name -> tests.TestForMessage.Uint64MapEntry
	31, // 10: tests.TestForMessage.sfixed32_map:type_name -> tests.TestForMessage.Sfixed32MapEntry
	32, // 11: tests.TestForMessage.sfixed64_map:type_name -> tests.TestForMessage.Sfixed64MapEntry
	33, // 12: tests.TestForMessage.json_map:type_name -> tests.TestForMessage.JsonMapEntry
	39, // 13: tests.TestForMessage.delays:type_name -> google.protobuf.Duration
	39, // 14: tests.TestForMessage.intervals:type_name -> google.protobuf.Duration
	39, // 15: tests.TestForMessage.timeouts:type_name -> google.protobuf.Duration
	40, // 16: tests.SimpleMessage.created_at:type_name -> google.protobuf.Timestamp
	41, // 17: tests.WrapperValueMessage.name:type_name -> google.protobuf.BoolValue
	42, // 18: tests.WrapperValueMessage.double_value:type_name -> google.protobuf.DoubleValue
	42, // 19: tests.WrapperValueMessage.double_values:type_name -> google.protobuf.DoubleValue
	43, // 20: tests.WrapperValueMessage.bytes_value:type_name -> google.protobuf.BytesValue
	43, // 21: tests.WrapperValueMessage.bytes_values:type_name -> google.protobuf.BytesValue
	43, // 22: tests.WrapperValueMessage.bytes_hex_values:type_name -> google.protobuf.BytesValue
	43, // 23: tests.WrapperValueMessage.bytes_hex_valuesx:type_name -> google.protobuf.BytesValue
	42, // 24: tests.DoubleSliceTestMessage.measurements:type_name -> google.protobuf.DoubleValue
	42, // 25: tests.DoubleSliceTestMessage.scientific_values:type_name -> google.protobuf.DoubleValue
	42, // 26: tests.DoubleSliceTestMessage.temperature_readings:type_name -> google.protobuf.DoubleValue
	42, // 27: tests.DoubleSliceTestMessage.coordinates:type_name -> google.protobuf.DoubleValue
	43, // 28: tests.BytesSliceTestMessage.data_chunks:type_name -> google.protobuf.BytesValue
	43, // 29: tests.BytesSliceTestMessage.file_contents:type_name -> google.protobuf.BytesValue
	43, // 30: tests.BytesSliceTestMessage.hex_data:type_name -> google.protobuf.BytesValue
	43, // 31: tests.BytesSliceTestMessage.binary_payloads:type_name -> google.protobuf.BytesValue
	44, // 32: tests.FloatValueTestMessage.single_value:type_name -> google.protobuf.FloatValue
	44, // 33: tests.FloatValueTestMessage.float_values:type_name -> google.protobuf.FloatValue
	44, // 34: tests.FloatValueTestMessage.temperature:type_name -> google.protobuf.FloatValue
	44, // 35: tests.FloatValueTestMessage.sensor_readings:type_name -> google.protobuf.FloatValue
	44, // 36: tests.FloatValueTestMessage.probability:type_name -> google.protobuf.FloatValue
	44, // 37: tests.FloatValueTestMessage.scores:type_name -> google.protobuf.FloatValue
	39, // 38: tests.DurationSliceTestMessage.delays:type_name -> google.protobuf.Duration
	39, // 39: tests.DurationSliceTestMessage.intervals:type_name -> google.protobuf.Duration
	39, // 40: tests.DurationSliceTestMessage.timeouts:type_name -> google.protobuf.Duration
	39, // 41: tests.DurationSliceTestMessage.polling_intervals:type_name -> google.protobuf.Duration
	40, // 42: tests.DurationSliceTestMessage.deadline:type_name -> google.protobuf.Timestamp
	40, // 43: tests.DurationSliceTestMessage.optional_deadline:type_name -> google.protobuf.Timestamp
	2,  // 44: tests.DisabledMessage.simple_message:type_name -> tests.SimpleMessage
	40, // 45: tests.DisabledMessage.created_at:type_name -> google.protobuf.Timestamp
	44, // 46: tests.WrapperMessage.value:type_name -> google.protobuf.FloatValue
	0,  // 47: tests.DefaultValueTestMessage.default_mode:type_name -> tests.TestEnum1
	0,  // 48: tests.DefaultValueTestMessage.default_mode2:type_name -> tests.TestEnum1
	45, // 49: tests.StringValueTestMessage.single_value:type_name -> google.protobuf.StringValue
	45, // 50: tests.StringValueTestMessage.string_values:type_name -> google.protobuf.StringValue
	45, // 51: tests.StringValueTestMessage.config_path:type_name -> google.protobuf.StringValue
	45, // 52: tests.StringValueTestMessage.include_paths:type_name -> google.protobuf.StringValue
	45, // 53: tests.StringValueTestMessage.environment:type_name -> google.protobuf.StringValue
	45, // 54: tests.StringValueTestMessage.tags:type_name -> google.protobuf.StringValue
	46, // 55: tests.IntegerValueTestMessage.int32_value:type_name -> google.protobuf.Int32Value
	47, // 56: tests.IntegerValueTestMessage.int64_value:type_name -> google.protobuf.Int64Value
	48, // 57: tests.IntegerValueTestMessage.uint32_value:type_name -> google.protobuf.UInt32Value
	49, // 58: tests.IntegerValueTestMessage.uint64_value:type_name -> google.protobuf.UInt64Value
	46, // 59: tests.IntegerValueTestMessage.int32_values:type_name -> google.protobuf.Int32Value
	47, // 60: tests.IntegerValueTestMessage.int64_values:type_name -> google.protobuf.Int64Value
	44, // 61: tests.IntegerValueTestMessage.float64_values:type_name -> google.protobuf.FloatValue
	41, // 62: tests.BoolValueTestMessage.single_value:type_name -> google.protobuf.BoolValue
	41, // 63: tests.BoolValueTestMessage.bool_values:type_name -> google.protobuf.BoolValue
	41, // 64: tests.BoolValueTestMessage.enable_feature:type_name -> google.protobuf.BoolValue
	41, // 65: tests.BoolValueTestMessage.feature_flags:type_name -> google.protobuf.BoolValue
	41, // 66: tests.BoolValueTestMessage.verbose_logging:type_name -> google.protobuf.BoolValue
	41, // 67: tests.BoolValueTestMessage.debug_options:type_name -> google.protobuf.BoolValue
	2,  // 68: tests.NestedMessageTestMessage.server_config:type_name -> tests.SimpleMessage
	2,  // 69: tests.NestedMessageTestMessage.client_config:type_name -> tests.SimpleMessage
	2,  // 70: tests.NestedMessageTestMessage.database_config:type_name -> tests.SimpleMessage
	20, // 71: tests.NestedMessageTestMessage.deep_config:type_name -> tests.NestedLevel2Message
	2,  // 72: tests.NestedLevel2Message.nested_simple:type_name -> tests.SimpleMessage
	34, // 73: tests.ComprehensiveMapTestMessage.json_labels:type_name -> tests.ComprehensiveMapTestMessage.JsonLabelsEntry
	35, // 74: tests.ComprehensiveMapTestMessage.native_labels:type_name -> tests.ComprehensiveMapTestMessage.NativeLabelsEntry
	36, // 75: tests.ComprehensiveMapTestMessage.default_counters:type_name -> tests.ComprehensiveMapTestMessage.DefaultCountersEntry
	37, // 76: tests.ComprehensiveMapTestMessage.legacy_config:type_name -> tests.ComprehensiveMapTestMessage.LegacyConfigEntry
	38, // 77: tests.ComprehensiveMapTestMessage.secret_config:type_name -> tests.ComprehensiveMapTestMessage.SecretConfigEntry
	40, // 78: tests.TimestampSliceTestMessage.event_times:type_name -> google.protobuf.Timestamp
	40, // 79: tests.TimestampSliceTestMessage.log_timestamps:type_name -> google.protobuf.Timestamp
	40, // 80: tests.TimestampSliceTestMessage.scheduled_tasks:type_name -> google.protobuf.Timestamp
	40, // 81: tests.TimestampSliceTestMessage.backup_times:type_name -> google.protobuf.Timestamp
	40, // 82: tests.TimestampSliceTestMessage.custom_format_times:type_name -> google.protobuf.Timestamp
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_tests_test_proto_init() }
func file_tests_test_proto_init() {
	if File_tests_test_proto != nil {
		return
	}
	file_tests_test_proto_msgTypes[0].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[2].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[5].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[6].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[7].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[11].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[13].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[14].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[15].OneofWrappers = []any{}
	file_tests_test_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_test_proto_rawDesc), len(file_tests_test_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_test_proto_goTypes,
		DependencyIndexes: file_tests_test_proto_depIdxs,
		EnumInfos:         file_tests_test_proto_enumTypes,
		MessageInfos:      file_tests_test_proto_msgTypes,
	}.Build()
	File_tests_test_proto = out.File
	file_tests_test_proto_goTypes = nil
	file_tests_test_proto_depIdxs = nil
}
