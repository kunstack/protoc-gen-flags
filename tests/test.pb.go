// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tests/test.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package tests

import (
	_ "github.com/kunstack/protoc-gen-flags/flags"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hello         float32                `protobuf:"fixed32,1,opt,name=hello,proto3" json:"hello,omitempty"`
	World         []string               `protobuf:"bytes,2,rep,name=world,proto3" json:"world,omitempty"`
	Greeting      string                 `protobuf:"bytes,3,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Count         int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Verbose       bool                   `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_tests_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetHello() float32 {
	if x != nil {
		return x.Hello
	}
	return 0
}

func (x *TestMessage) GetWorld() []string {
	if x != nil {
		return x.World
	}
	return nil
}

func (x *TestMessage) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *TestMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TestMessage) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type SimpleMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleMessage) Reset() {
	*x = SimpleMessage{}
	mi := &file_tests_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMessage) ProtoMessage() {}

func (x *SimpleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMessage.ProtoReflect.Descriptor instead.
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DisabledMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	SimpleMessage *SimpleMessage         `protobuf:"bytes,2,opt,name=simple_message,json=simpleMessage,proto3" json:"simple_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisabledMessage) Reset() {
	*x = DisabledMessage{}
	mi := &file_tests_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisabledMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisabledMessage) ProtoMessage() {}

func (x *DisabledMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tests_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisabledMessage.ProtoReflect.Descriptor instead.
func (*DisabledMessage) Descriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{2}
}

func (x *DisabledMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DisabledMessage) GetSimpleMessage() *SimpleMessage {
	if x != nil {
		return x.SimpleMessage
	}
	return nil
}

var File_tests_test_proto protoreflect.FileDescriptor

const file_tests_test_proto_rawDesc = "" +
	"\n" +
	"\x10tests/test.proto\x12\x05flags\x1a\x11flags/flags.proto\"\xe2\x03\n" +
	"\vTestMessage\x12g\n" +
	"\x05hello\x18\x01 \x01(\x02BQ\x9aIN\n" +
	"L\x12\x05hello\"\x10Hello world flag0\x01:/This flag is deprecated, use --greeting insteadR\x05hello\x12\x85\x01\n" +
	"\x05world\x18\x02 \x03(\tBo\x9aIl\x8a\x01irg\x12\x05world\"-World flags (can be specified multiple times)0\x01:-This flag is deprecated, use --target insteadR\x05world\x12K\n" +
	"\bgreeting\x18\x03 \x01(\tB/\x9aI,r*\x12\bgreeting\x1a\x01g\"\x1bGreeting message to displayR\bgreeting\x12L\n" +
	"\x05count\x18\x04 \x01(\x05B6\x9aI3\x1a1\x12\x05count\x1a\x01c\"%Number of times to repeat the messageR\x05count\x12B\n" +
	"\averbose\x18\x05 \x01(\bB(\x9aI%j#\x12\averbose\x1a\x01v\"\x15Enable verbose outputR\averbose:\x03\xa8I\x01\"@\n" +
	"\rSimpleMessage\x12/\n" +
	"\x04name\x18\x01 \x01(\tB\x1b\x9aI\x18r\x16\x12\x04name\"\x0eName parameterR\x04name\"\xa7\x01\n" +
	"\x0fDisabledMessage\x12B\n" +
	"\x05value\x18\x01 \x01(\tB,\x9aI)r'\x12\x05value\"\x1eThis should not appear in helpR\x05value\x12K\n" +
	"\x0esimple_message\x18\x02 \x01(\v2\x14.flags.SimpleMessageB\x0e\x9aI\v\xaa\x01\b\x12\x06simpleR\rsimpleMessage:\x03\x98I\x01B2Z0github.com/kunstack/protoc-gen-flags/tests;testsb\x06proto3"

var (
	file_tests_test_proto_rawDescOnce sync.Once
	file_tests_test_proto_rawDescData []byte
)

func file_tests_test_proto_rawDescGZIP() []byte {
	file_tests_test_proto_rawDescOnce.Do(func() {
		file_tests_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tests_test_proto_rawDesc), len(file_tests_test_proto_rawDesc)))
	})
	return file_tests_test_proto_rawDescData
}

var file_tests_test_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tests_test_proto_goTypes = []any{
	(*TestMessage)(nil),     // 0: flags.TestMessage
	(*SimpleMessage)(nil),   // 1: flags.SimpleMessage
	(*DisabledMessage)(nil), // 2: flags.DisabledMessage
}
var file_tests_test_proto_depIdxs = []int32{
	1, // 0: flags.DisabledMessage.simple_message:type_name -> flags.SimpleMessage
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tests_test_proto_init() }
func file_tests_test_proto_init() {
	if File_tests_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_test_proto_rawDesc), len(file_tests_test_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_test_proto_goTypes,
		DependencyIndexes: file_tests_test_proto_depIdxs,
		MessageInfos:      file_tests_test_proto_msgTypes,
	}.Build()
	File_tests_test_proto = out.File
	file_tests_test_proto_goTypes = nil
	file_tests_test_proto_depIdxs = nil
}
