// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package module

import (
	"fmt"
	"strings"
	"text/template"

	"github.com/kunstack/protoc-gen-flags/flags"
	pgs "github.com/lyft/protoc-gen-star"
	pgsgo "github.com/lyft/protoc-gen-star/lang/go"
)

func Flags() *Module {
	return &Module{
		ModuleBase: &pgs.ModuleBase{},
		imports:    make(map[string]struct{}),
	}
}

type Module struct {
	*pgs.ModuleBase
	ctx     pgsgo.Context
	tpl     *template.Template
	imports map[string]struct{}
}

func (m *Module) Name() string {
	return "flags"
}

func (m *Module) InitContext(c pgs.BuildContext) {
	m.ModuleBase.InitContext(c)
	m.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("fields").Funcs(map[string]interface{}{
		"package": m.ctx.PackageName,
		"name":    m.ctx.Name,
		"methodName": func(m pgs.Message) string {
			var private bool
			_, _ = m.Extension(flags.E_Unexported, &private)
			if private {
				return "_AddFlags"
			}
			return "AddFlags"
		},
		"defaultMethodName": func(m pgs.Message) string {
			var private bool
			_, _ = m.Extension(flags.E_Unexported, &private)
			if private {
				return "_SetDefaults"
			}
			return "SetDefaults"
		},
		"comment": func(s string) string {
			var out string
			parts := strings.Split(s, "\n")
			for i, v := range parts {
				if i == len(parts)-1 && v == "" {
					return out
				}
				out += "//" + v + "\n"
			}
			return out
		},
		"imports": func() string {
			var imports string
			for v := range m.imports {
				imports += fmt.Sprintf("\"%s\"\n", v)
			}
			return imports
		},
		"enabled": func(msg pgs.Message) bool {
			var (
				disabled   bool
				hasFlag    bool
				allowEmpty bool
			)
			for _, field := range msg.Fields() {
				var fd flags.FieldFlags
				ok, err := field.Extension(flags.E_Value, &fd)
				if err == nil && ok && !field.InRealOneOf() {
					hasFlag = true
					break
				}
			}
			_, _ = msg.Extension(flags.E_Disabled, &disabled)
			_, _ = msg.Extension(flags.E_AllowEmpty, &allowEmpty)

			return !disabled && (hasFlag || allowEmpty)
		},
		"flags": func(f pgs.Field) string {
			return m.genFieldFlags(f)
		},
		"defaults": func(f pgs.Field) string {
			return m.genFieldDefaults(f)
		},
	})
	m.tpl = template.Must(tpl.Parse(defaultsTpl))
}

func (m *Module) Execute(targets map[string]pgs.File, _ map[string]pgs.Package) []pgs.Artifact {
	for _, f := range targets {
		m.generate(f)
	}
	return m.Artifacts()
}

func (m *Module) generate(f pgs.File) {
	if len(f.Messages()) == 0 {
		return
	}
	for _, msg := range f.Messages() {
		m.Check(msg)
	}
	name := m.ctx.OutputPath(f).SetExt(".flags.go")
	m.AddGeneratorTemplateFile(name.String(), m.tpl, f)
}

const defaultsTpl = `{{ comment .SyntaxSourceCodeInfo.LeadingComments }}
{{ range .SyntaxSourceCodeInfo.LeadingDetachedComments }}
{{ comment . }}
{{ end }}
// Code generated by protoc-gen-flags. DO NOT EDIT.

package {{ package . }}

import (
	"github.com/spf13/pflag"
	"github.com/kunstack/protoc-gen-flags/utils"
    "github.com/kunstack/protoc-gen-flags/types"
    "github.com/kunstack/protoc-gen-flags/flags"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"	

	{{ imports }}
)

var (
	_ = pflag.NewFlagSet
	_ = utils.BuildFlagName
    _ = types.Bool
    _ = flags.Flagger(nil)
	_ = wrapperspb.String
	_ = (*durationpb.Duration)(nil)
	_ = (*timestamppb.Timestamp)(nil)
)

{{ range .AllMessages }}
{{ if enabled . }}
func (x *{{ name . }}) {{ methodName . }}(fs *pflag.FlagSet, prefix ...string) {
	{{- range .Fields }}
		{{- flags . }}
	{{- end }}
}

func (x *{{ name . }}) {{ defaultMethodName . }}() {
	{{- range .Fields }}
		{{- defaults . }}
	{{- end }}
}
{{- end }}
{{ end }}
`
