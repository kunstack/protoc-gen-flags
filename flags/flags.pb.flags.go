// Package flags provides protobuf extensions for generating command-line flag bindings.
//
// This package defines extensions that can be used in protobuf files to configure
// how AddFlags methods are generated for messages and fields. The generated code
// integrates with the spf13/pflag library to provide POSIX/GNU-style command-line
// flag parsing.
//
// # Message Level Options
//
// Message-level options control the overall flag generation behavior for a message:
//
//   option (flags.disabled) = true;     // Skip flag generation for this message
//   option (flags.unexported) = true;   // Generate unexported flag methods
//   option (flags.allow_empty) = true;  // Generate flags even without field configurations
//
// # Field Level Options
//
// Field-level options configure individual flag behavior:
//
//   string name = 1 [(flags.value).string = {
//     name: "custom-name"
//     short: "n"
//     usage: "Custom usage description"
//   }];
//
// # Supported Types
//
// All protobuf scalar types are supported, including:
//   - Numeric types: int32, int64, uint32, uint64, float, double, etc.
//   - String and bytes
//   - Boolean
//   - Enum types
//   - Repeated fields
//   - Well-known types: duration, timestamp

// Copyright 2021 Aapeli <aapeli.nian@gmail.com>  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-flags. DO NOT EDIT.

package flags

import (
	"github.com/kunstack/protoc-gen-flags/types"
	"github.com/kunstack/protoc-gen-flags/utils"
	"github.com/spf13/pflag"
)

var (
	_ = pflag.NewFlagSet
	_ = utils.BuildFlagName
	_ = types.Bool
)
