// Copyright 2021 Aapeli <aapeli.nian@gmail.com>  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package flags provides protobuf extensions for generating command-line flag bindings.
//
// This package defines extensions that can be used in protobuf files to configure
// how AddFlags methods are generated for messages and fields. The generated code
// integrates with the spf13/pflag library to provide POSIX/GNU-style command-line
// flag parsing.
//
// # Message Level Options
//
// Message-level options control the overall flag generation behavior for a message:
//
//   option (flags.disabled) = true;     // Skip flag generation for this message
//   option (flags.unexported) = true;   // Generate unexported flag methods
//   option (flags.allow_empty) = true;  // Generate flags even without field configurations
//
// # Field Level Options
//
// Field-level options configure individual flag behavior:
//
//   string name = 1 [(flags.value).string = {
//     name: "custom-name"
//     short: "n"
//     usage: "Custom usage description"
//     default: "default-value"
//   }];
//
// # Supported Types
//
// All protobuf scalar types are supported, including:
//   - Numeric types: int32, int64, uint32, uint64, float, double, etc.
//   - String and bytes
//   - Boolean
//   - Enum types
//   - Repeated fields
//   - Well-known types: duration, timestamp

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: flags/flags.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore PACKAGE_SAME_DIRECTORY

package flags

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BytesEncodingType specifies the encoding format for bytes fields in command-line flags.
type BytesEncodingType int32

const (
	// BYTES_ENCODING_TYPE_UNSPECIFIED uses the default base64 encoding.
	BytesEncodingType_BYTES_ENCODING_TYPE_UNSPECIFIED BytesEncodingType = 0
	// BYTES_ENCODING_TYPE_BASE64 uses standard base64 encoding for bytes fields.
	BytesEncodingType_BYTES_ENCODING_TYPE_BASE64 BytesEncodingType = 1
	// BYTES_ENCODING_TYPE_HEX uses hexadecimal encoding for bytes fields.
	BytesEncodingType_BYTES_ENCODING_TYPE_HEX BytesEncodingType = 2
)

// Enum value maps for BytesEncodingType.
var (
	BytesEncodingType_name = map[int32]string{
		0: "BYTES_ENCODING_TYPE_UNSPECIFIED",
		1: "BYTES_ENCODING_TYPE_BASE64",
		2: "BYTES_ENCODING_TYPE_HEX",
	}
	BytesEncodingType_value = map[string]int32{
		"BYTES_ENCODING_TYPE_UNSPECIFIED": 0,
		"BYTES_ENCODING_TYPE_BASE64":      1,
		"BYTES_ENCODING_TYPE_HEX":         2,
	}
)

func (x BytesEncodingType) Enum() *BytesEncodingType {
	p := new(BytesEncodingType)
	*p = x
	return p
}

func (x BytesEncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BytesEncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_flags_flags_proto_enumTypes[0].Descriptor()
}

func (BytesEncodingType) Type() protoreflect.EnumType {
	return &file_flags_flags_proto_enumTypes[0]
}

func (x BytesEncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BytesEncodingType.Descriptor instead.
func (BytesEncodingType) EnumDescriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{0}
}

// MapFormatType specifies the format for map fields in command-line flags.
type MapFormatType int32

const (
	// MAP_FORMAT_TYPE_UNSPECIFIED uses the default format (JSON).
	MapFormatType_MAP_FORMAT_TYPE_UNSPECIFIED MapFormatType = 0
	// MAP_FORMAT_TYPE_JSON uses JSON format for the entire map.
	MapFormatType_MAP_FORMAT_TYPE_JSON MapFormatType = 1
	// MAP_FORMAT_TYPE_STRING_TO_STRING uses string keys and string values.
	MapFormatType_MAP_FORMAT_TYPE_STRING_TO_STRING MapFormatType = 2
	// MAP_FORMAT_TYPE_STRING_TO_INT uses string keys and int values.
	MapFormatType_MAP_FORMAT_TYPE_STRING_TO_INT MapFormatType = 3
)

// Enum value maps for MapFormatType.
var (
	MapFormatType_name = map[int32]string{
		0: "MAP_FORMAT_TYPE_UNSPECIFIED",
		1: "MAP_FORMAT_TYPE_JSON",
		2: "MAP_FORMAT_TYPE_STRING_TO_STRING",
		3: "MAP_FORMAT_TYPE_STRING_TO_INT",
	}
	MapFormatType_value = map[string]int32{
		"MAP_FORMAT_TYPE_UNSPECIFIED":      0,
		"MAP_FORMAT_TYPE_JSON":             1,
		"MAP_FORMAT_TYPE_STRING_TO_STRING": 2,
		"MAP_FORMAT_TYPE_STRING_TO_INT":    3,
	}
)

func (x MapFormatType) Enum() *MapFormatType {
	p := new(MapFormatType)
	*p = x
	return p
}

func (x MapFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_flags_flags_proto_enumTypes[1].Descriptor()
}

func (MapFormatType) Type() protoreflect.EnumType {
	return &file_flags_flags_proto_enumTypes[1]
}

func (x MapFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapFormatType.Descriptor instead.
func (MapFormatType) EnumDescriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{1}
}

// BytesFlag contains configuration specifically for bytes fields with encoding type selection.
//
// This message allows customization of how bytes fields are encoded and decoded
// in command-line flags, supporting both base64 and hexadecimal formats.
type BytesFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Encoding specifies the encoding format for bytes fields. When unspecified,
	// defaults to base64 encoding.
	Encoding BytesEncodingType `protobuf:"varint,8,opt,name=encoding,proto3,enum=flags.BytesEncodingType" json:"encoding,omitempty"`
	// Default specifies the default value for this flag.
	Default       []byte `protobuf:"bytes,9,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesFlag) Reset() {
	*x = BytesFlag{}
	mi := &file_flags_flags_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesFlag) ProtoMessage() {}

func (x *BytesFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesFlag.ProtoReflect.Descriptor instead.
func (*BytesFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{0}
}

func (x *BytesFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *BytesFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BytesFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *BytesFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *BytesFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *BytesFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BytesFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *BytesFlag) GetEncoding() BytesEncodingType {
	if x != nil {
		return x.Encoding
	}
	return BytesEncodingType_BYTES_ENCODING_TYPE_UNSPECIFIED
}

func (x *BytesFlag) GetDefault() []byte {
	if x != nil {
		return x.Default
	}
	return nil
}

// FieldFlags encapsulates the flag configuration for each type of field.
//
// The oneof type field ensures type safety and allows the code generator to
// determine which pflag method to use (StringVarP, IntVarP, etc.) for each
// field type. Only one of the type fields should be set, corresponding to
// the actual protobuf field type.
type FieldFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldFlags_Float
	//	*FieldFlags_Double
	//	*FieldFlags_Int32
	//	*FieldFlags_Int64
	//	*FieldFlags_Uint32
	//	*FieldFlags_Uint64
	//	*FieldFlags_Sint32
	//	*FieldFlags_Sint64
	//	*FieldFlags_Fixed32
	//	*FieldFlags_Fixed64
	//	*FieldFlags_Sfixed32
	//	*FieldFlags_Sfixed64
	//	*FieldFlags_Bool
	//	*FieldFlags_String_
	//	*FieldFlags_Bytes
	//	*FieldFlags_Enum
	//	*FieldFlags_Repeated
	//	*FieldFlags_Map
	//	*FieldFlags_Duration
	//	*FieldFlags_Timestamp
	//	*FieldFlags_Message
	Type          isFieldFlags_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldFlags) Reset() {
	*x = FieldFlags{}
	mi := &file_flags_flags_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldFlags) ProtoMessage() {}

func (x *FieldFlags) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldFlags.ProtoReflect.Descriptor instead.
func (*FieldFlags) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{1}
}

func (x *FieldFlags) GetType() isFieldFlags_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldFlags) GetFloat() *FloatFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *FieldFlags) GetDouble() *DoubleFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *FieldFlags) GetInt32() *Int32Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *FieldFlags) GetInt64() *Int64Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *FieldFlags) GetUint32() *Uint32Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *FieldFlags) GetUint64() *Uint64Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *FieldFlags) GetSint32() *Sint32Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *FieldFlags) GetSint64() *Sint64Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *FieldFlags) GetFixed32() *Fixed32Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *FieldFlags) GetFixed64() *Fixed64Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *FieldFlags) GetSfixed32() *Sfixed32Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *FieldFlags) GetSfixed64() *Sfixed64Flag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *FieldFlags) GetBool() *BoolFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *FieldFlags) GetString_() *StringFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldFlags) GetBytes() *BytesFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *FieldFlags) GetEnum() *EnumFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *FieldFlags) GetRepeated() *RepeatedFlags {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldFlags) GetMap() *MapFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *FieldFlags) GetDuration() *DurationFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *FieldFlags) GetTimestamp() *TimestampFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

func (x *FieldFlags) GetMessage() *MessageFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Message); ok {
			return x.Message
		}
	}
	return nil
}

type isFieldFlags_Type interface {
	isFieldFlags_Type()
}

type FieldFlags_Float struct {
	// Scalar Field Types - each type has its own flag configuration with default value support
	Float *FloatFlag `protobuf:"bytes,1,opt,name=float,proto3,oneof"` // 32-bit floating point
}

type FieldFlags_Double struct {
	Double *DoubleFlag `protobuf:"bytes,2,opt,name=double,proto3,oneof"` // 64-bit floating point
}

type FieldFlags_Int32 struct {
	Int32 *Int32Flag `protobuf:"bytes,3,opt,name=int32,proto3,oneof"` // 32-bit signed integer
}

type FieldFlags_Int64 struct {
	Int64 *Int64Flag `protobuf:"bytes,4,opt,name=int64,proto3,oneof"` // 64-bit signed integer
}

type FieldFlags_Uint32 struct {
	Uint32 *Uint32Flag `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"` // 32-bit unsigned integer
}

type FieldFlags_Uint64 struct {
	Uint64 *Uint64Flag `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"` // 64-bit unsigned integer
}

type FieldFlags_Sint32 struct {
	Sint32 *Sint32Flag `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"` // 32-bit signed integer (zigzag encoded)
}

type FieldFlags_Sint64 struct {
	Sint64 *Sint64Flag `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"` // 64-bit signed integer (zigzag encoded)
}

type FieldFlags_Fixed32 struct {
	Fixed32 *Fixed32Flag `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"` // 32-bit fixed-point integer
}

type FieldFlags_Fixed64 struct {
	Fixed64 *Fixed64Flag `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"` // 64-bit fixed-point integer
}

type FieldFlags_Sfixed32 struct {
	Sfixed32 *Sfixed32Flag `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"` // 32-bit signed fixed-point integer
}

type FieldFlags_Sfixed64 struct {
	Sfixed64 *Sfixed64Flag `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"` // 64-bit signed fixed-point integer
}

type FieldFlags_Bool struct {
	Bool *BoolFlag `protobuf:"bytes,13,opt,name=bool,proto3,oneof"` // Boolean value
}

type FieldFlags_String_ struct {
	String_ *StringFlag `protobuf:"bytes,14,opt,name=string,proto3,oneof"` // UTF-8 string
}

type FieldFlags_Bytes struct {
	// Bytes field type with encoding type selection
	Bytes *BytesFlag `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"` // Arbitrary bytes with encoding format
}

type FieldFlags_Enum struct {
	// Complex Field Types
	Enum *EnumFlag `protobuf:"bytes,16,opt,name=enum,proto3,oneof"` // Enum type
}

type FieldFlags_Repeated struct {
	Repeated *RepeatedFlags `protobuf:"bytes,17,opt,name=repeated,proto3,oneof"` // Repeated field (slice/array)
}

type FieldFlags_Map struct {
	Map *MapFlag `protobuf:"bytes,18,opt,name=map,proto3,oneof"` // Map field
}

type FieldFlags_Duration struct {
	// Well-Known Field Types
	Duration *DurationFlag `protobuf:"bytes,19,opt,name=duration,proto3,oneof"` // google.protobuf.Duration
}

type FieldFlags_Timestamp struct {
	Timestamp *TimestampFlag `protobuf:"bytes,20,opt,name=timestamp,proto3,oneof"` // google.protobuf.Timestamp
}

type FieldFlags_Message struct {
	// Message field type - used for nested message configurations
	Message *MessageFlag `protobuf:"bytes,21,opt,name=message,proto3,oneof"`
}

func (*FieldFlags_Float) isFieldFlags_Type() {}

func (*FieldFlags_Double) isFieldFlags_Type() {}

func (*FieldFlags_Int32) isFieldFlags_Type() {}

func (*FieldFlags_Int64) isFieldFlags_Type() {}

func (*FieldFlags_Uint32) isFieldFlags_Type() {}

func (*FieldFlags_Uint64) isFieldFlags_Type() {}

func (*FieldFlags_Sint32) isFieldFlags_Type() {}

func (*FieldFlags_Sint64) isFieldFlags_Type() {}

func (*FieldFlags_Fixed32) isFieldFlags_Type() {}

func (*FieldFlags_Fixed64) isFieldFlags_Type() {}

func (*FieldFlags_Sfixed32) isFieldFlags_Type() {}

func (*FieldFlags_Sfixed64) isFieldFlags_Type() {}

func (*FieldFlags_Bool) isFieldFlags_Type() {}

func (*FieldFlags_String_) isFieldFlags_Type() {}

func (*FieldFlags_Bytes) isFieldFlags_Type() {}

func (*FieldFlags_Enum) isFieldFlags_Type() {}

func (*FieldFlags_Repeated) isFieldFlags_Type() {}

func (*FieldFlags_Map) isFieldFlags_Type() {}

func (*FieldFlags_Duration) isFieldFlags_Type() {}

func (*FieldFlags_Timestamp) isFieldFlags_Type() {}

func (*FieldFlags_Message) isFieldFlags_Type() {}

// PrimitiveFlag contains the core configuration for all primitive flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
type PrimitiveFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrimitiveFlag) Reset() {
	*x = PrimitiveFlag{}
	mi := &file_flags_flags_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimitiveFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveFlag) ProtoMessage() {}

func (x *PrimitiveFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveFlag.ProtoReflect.Descriptor instead.
func (*PrimitiveFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{2}
}

func (x *PrimitiveFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *PrimitiveFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrimitiveFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *PrimitiveFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *PrimitiveFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *PrimitiveFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *PrimitiveFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

// FloatFlag contains configuration for float32 fields with default value support.
type FloatFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *float32 `protobuf:"fixed32,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatFlag) Reset() {
	*x = FloatFlag{}
	mi := &file_flags_flags_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatFlag) ProtoMessage() {}

func (x *FloatFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatFlag.ProtoReflect.Descriptor instead.
func (*FloatFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{3}
}

func (x *FloatFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *FloatFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FloatFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *FloatFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *FloatFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *FloatFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *FloatFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *FloatFlag) GetDefault() float32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// DoubleFlag contains configuration for float64 fields with default value support.
type DoubleFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *float64 `protobuf:"fixed64,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleFlag) Reset() {
	*x = DoubleFlag{}
	mi := &file_flags_flags_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleFlag) ProtoMessage() {}

func (x *DoubleFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleFlag.ProtoReflect.Descriptor instead.
func (*DoubleFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *DoubleFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DoubleFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *DoubleFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *DoubleFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *DoubleFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *DoubleFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *DoubleFlag) GetDefault() float64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Int32Flag contains configuration for int32 fields with default value support.
type Int32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int32 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32Flag) Reset() {
	*x = Int32Flag{}
	mi := &file_flags_flags_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Flag) ProtoMessage() {}

func (x *Int32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Flag.ProtoReflect.Descriptor instead.
func (*Int32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{5}
}

func (x *Int32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Int32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Int32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Int32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Int32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Int32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Int32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Int32Flag) GetDefault() int32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Int64Flag contains configuration for int64 fields with default value support.
type Int64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int64 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Flag) Reset() {
	*x = Int64Flag{}
	mi := &file_flags_flags_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Flag) ProtoMessage() {}

func (x *Int64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Flag.ProtoReflect.Descriptor instead.
func (*Int64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{6}
}

func (x *Int64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Int64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Int64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Int64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Int64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Int64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Int64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Int64Flag) GetDefault() int64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Uint32Flag contains configuration for uint32 fields with default value support.
type Uint32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *uint32 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint32Flag) Reset() {
	*x = Uint32Flag{}
	mi := &file_flags_flags_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Flag) ProtoMessage() {}

func (x *Uint32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Flag.ProtoReflect.Descriptor instead.
func (*Uint32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{7}
}

func (x *Uint32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Uint32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Uint32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Uint32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Uint32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Uint32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Uint32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Uint32Flag) GetDefault() uint32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Uint64Flag contains configuration for uint64 fields with default value support.
type Uint64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *uint64 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint64Flag) Reset() {
	*x = Uint64Flag{}
	mi := &file_flags_flags_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Flag) ProtoMessage() {}

func (x *Uint64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Flag.ProtoReflect.Descriptor instead.
func (*Uint64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{8}
}

func (x *Uint64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Uint64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Uint64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Uint64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Uint64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Uint64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Uint64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Uint64Flag) GetDefault() uint64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Sint32Flag contains configuration for sint32 fields with default value support.
type Sint32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int32 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sint32Flag) Reset() {
	*x = Sint32Flag{}
	mi := &file_flags_flags_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sint32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sint32Flag) ProtoMessage() {}

func (x *Sint32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sint32Flag.ProtoReflect.Descriptor instead.
func (*Sint32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{9}
}

func (x *Sint32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Sint32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sint32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Sint32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Sint32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Sint32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Sint32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Sint32Flag) GetDefault() int32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Sint64Flag contains configuration for sint64 fields with default value support.
type Sint64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int64 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sint64Flag) Reset() {
	*x = Sint64Flag{}
	mi := &file_flags_flags_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sint64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sint64Flag) ProtoMessage() {}

func (x *Sint64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sint64Flag.ProtoReflect.Descriptor instead.
func (*Sint64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{10}
}

func (x *Sint64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Sint64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sint64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Sint64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Sint64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Sint64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Sint64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Sint64Flag) GetDefault() int64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Fixed32Flag contains configuration for fixed32 fields with default value support.
type Fixed32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *uint32 `protobuf:"fixed32,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed32Flag) Reset() {
	*x = Fixed32Flag{}
	mi := &file_flags_flags_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed32Flag) ProtoMessage() {}

func (x *Fixed32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed32Flag.ProtoReflect.Descriptor instead.
func (*Fixed32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{11}
}

func (x *Fixed32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Fixed32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fixed32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Fixed32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Fixed32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Fixed32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Fixed32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Fixed32Flag) GetDefault() uint32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Fixed64Flag contains configuration for fixed64 fields with default value support.
type Fixed64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *uint64 `protobuf:"fixed64,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed64Flag) Reset() {
	*x = Fixed64Flag{}
	mi := &file_flags_flags_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed64Flag) ProtoMessage() {}

func (x *Fixed64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed64Flag.ProtoReflect.Descriptor instead.
func (*Fixed64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{12}
}

func (x *Fixed64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Fixed64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fixed64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Fixed64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Fixed64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Fixed64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Fixed64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Fixed64Flag) GetDefault() uint64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Sfixed32Flag contains configuration for sfixed32 fields with default value support.
type Sfixed32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int32 `protobuf:"fixed32,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sfixed32Flag) Reset() {
	*x = Sfixed32Flag{}
	mi := &file_flags_flags_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sfixed32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sfixed32Flag) ProtoMessage() {}

func (x *Sfixed32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sfixed32Flag.ProtoReflect.Descriptor instead.
func (*Sfixed32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{13}
}

func (x *Sfixed32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Sfixed32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sfixed32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Sfixed32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Sfixed32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Sfixed32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Sfixed32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Sfixed32Flag) GetDefault() int32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// Sfixed64Flag contains configuration for sfixed64 fields with default value support.
type Sfixed64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *int64 `protobuf:"fixed64,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sfixed64Flag) Reset() {
	*x = Sfixed64Flag{}
	mi := &file_flags_flags_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sfixed64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sfixed64Flag) ProtoMessage() {}

func (x *Sfixed64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sfixed64Flag.ProtoReflect.Descriptor instead.
func (*Sfixed64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{14}
}

func (x *Sfixed64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Sfixed64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sfixed64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Sfixed64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Sfixed64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Sfixed64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Sfixed64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *Sfixed64Flag) GetDefault() int64 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// BoolFlag contains configuration for bool fields with default value support.
type BoolFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *bool `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolFlag) Reset() {
	*x = BoolFlag{}
	mi := &file_flags_flags_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolFlag) ProtoMessage() {}

func (x *BoolFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolFlag.ProtoReflect.Descriptor instead.
func (*BoolFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{15}
}

func (x *BoolFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *BoolFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoolFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *BoolFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *BoolFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *BoolFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BoolFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *BoolFlag) GetDefault() bool {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return false
}

// StringFlag contains configuration for string fields with default value support.
type StringFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag as a JSON string.
	Default       *string `protobuf:"bytes,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringFlag) Reset() {
	*x = StringFlag{}
	mi := &file_flags_flags_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFlag) ProtoMessage() {}

func (x *StringFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFlag.ProtoReflect.Descriptor instead.
func (*StringFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{16}
}

func (x *StringFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StringFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StringFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *StringFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *StringFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *StringFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *StringFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *StringFlag) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

// RepeatedFloatFlag contains configuration for repeated float32 fields with default value support.
type RepeatedFloatFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []float32 `protobuf:"fixed32,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedFloatFlag) Reset() {
	*x = RepeatedFloatFlag{}
	mi := &file_flags_flags_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedFloatFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFloatFlag) ProtoMessage() {}

func (x *RepeatedFloatFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFloatFlag.ProtoReflect.Descriptor instead.
func (*RepeatedFloatFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{17}
}

func (x *RepeatedFloatFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedFloatFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedFloatFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedFloatFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedFloatFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedFloatFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedFloatFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedFloatFlag) GetDefault() []float32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedDoubleFlag contains configuration for repeated float64 fields with default value support.
type RepeatedDoubleFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []float64 `protobuf:"fixed64,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedDoubleFlag) Reset() {
	*x = RepeatedDoubleFlag{}
	mi := &file_flags_flags_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedDoubleFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedDoubleFlag) ProtoMessage() {}

func (x *RepeatedDoubleFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedDoubleFlag.ProtoReflect.Descriptor instead.
func (*RepeatedDoubleFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{18}
}

func (x *RepeatedDoubleFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedDoubleFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedDoubleFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedDoubleFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedDoubleFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedDoubleFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedDoubleFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedDoubleFlag) GetDefault() []float64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedInt32Flag contains configuration for repeated int32 fields with default value support.
type RepeatedInt32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int32 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedInt32Flag) Reset() {
	*x = RepeatedInt32Flag{}
	mi := &file_flags_flags_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedInt32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedInt32Flag) ProtoMessage() {}

func (x *RepeatedInt32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedInt32Flag.ProtoReflect.Descriptor instead.
func (*RepeatedInt32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{19}
}

func (x *RepeatedInt32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedInt32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedInt32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedInt32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedInt32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedInt32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedInt32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedInt32Flag) GetDefault() []int32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedInt64Flag contains configuration for repeated int64 fields with default value support.
type RepeatedInt64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int64 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedInt64Flag) Reset() {
	*x = RepeatedInt64Flag{}
	mi := &file_flags_flags_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedInt64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedInt64Flag) ProtoMessage() {}

func (x *RepeatedInt64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedInt64Flag.ProtoReflect.Descriptor instead.
func (*RepeatedInt64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{20}
}

func (x *RepeatedInt64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedInt64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedInt64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedInt64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedInt64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedInt64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedInt64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedInt64Flag) GetDefault() []int64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedUint32Flag contains configuration for repeated uint32 fields with default value support.
type RepeatedUint32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []uint32 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedUint32Flag) Reset() {
	*x = RepeatedUint32Flag{}
	mi := &file_flags_flags_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedUint32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedUint32Flag) ProtoMessage() {}

func (x *RepeatedUint32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedUint32Flag.ProtoReflect.Descriptor instead.
func (*RepeatedUint32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{21}
}

func (x *RepeatedUint32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedUint32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedUint32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedUint32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedUint32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedUint32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedUint32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedUint32Flag) GetDefault() []uint32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedUint64Flag contains configuration for repeated uint64 fields with default value support.
type RepeatedUint64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []uint64 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedUint64Flag) Reset() {
	*x = RepeatedUint64Flag{}
	mi := &file_flags_flags_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedUint64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedUint64Flag) ProtoMessage() {}

func (x *RepeatedUint64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedUint64Flag.ProtoReflect.Descriptor instead.
func (*RepeatedUint64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{22}
}

func (x *RepeatedUint64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedUint64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedUint64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedUint64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedUint64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedUint64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedUint64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedUint64Flag) GetDefault() []uint64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedSint32Flag contains configuration for repeated sint32 fields with default value support.
type RepeatedSint32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int32 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedSint32Flag) Reset() {
	*x = RepeatedSint32Flag{}
	mi := &file_flags_flags_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedSint32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedSint32Flag) ProtoMessage() {}

func (x *RepeatedSint32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedSint32Flag.ProtoReflect.Descriptor instead.
func (*RepeatedSint32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{23}
}

func (x *RepeatedSint32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedSint32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedSint32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedSint32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedSint32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedSint32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedSint32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedSint32Flag) GetDefault() []int32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedSint64Flag contains configuration for repeated sint64 fields with default value support.
type RepeatedSint64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int64 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedSint64Flag) Reset() {
	*x = RepeatedSint64Flag{}
	mi := &file_flags_flags_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedSint64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedSint64Flag) ProtoMessage() {}

func (x *RepeatedSint64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedSint64Flag.ProtoReflect.Descriptor instead.
func (*RepeatedSint64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{24}
}

func (x *RepeatedSint64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedSint64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedSint64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedSint64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedSint64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedSint64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedSint64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedSint64Flag) GetDefault() []int64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedFixed32Flag contains configuration for repeated fixed32 fields with default value support.
type RepeatedFixed32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []uint32 `protobuf:"fixed32,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedFixed32Flag) Reset() {
	*x = RepeatedFixed32Flag{}
	mi := &file_flags_flags_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedFixed32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFixed32Flag) ProtoMessage() {}

func (x *RepeatedFixed32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFixed32Flag.ProtoReflect.Descriptor instead.
func (*RepeatedFixed32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{25}
}

func (x *RepeatedFixed32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedFixed32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedFixed32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedFixed32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedFixed32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedFixed32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedFixed32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedFixed32Flag) GetDefault() []uint32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedFixed64Flag contains configuration for repeated fixed64 fields with default value support.
type RepeatedFixed64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []uint64 `protobuf:"fixed64,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedFixed64Flag) Reset() {
	*x = RepeatedFixed64Flag{}
	mi := &file_flags_flags_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedFixed64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFixed64Flag) ProtoMessage() {}

func (x *RepeatedFixed64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFixed64Flag.ProtoReflect.Descriptor instead.
func (*RepeatedFixed64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{26}
}

func (x *RepeatedFixed64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedFixed64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedFixed64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedFixed64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedFixed64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedFixed64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedFixed64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedFixed64Flag) GetDefault() []uint64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedSfixed32Flag contains configuration for repeated sfixed32 fields with default value support.
type RepeatedSfixed32Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int32 `protobuf:"fixed32,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedSfixed32Flag) Reset() {
	*x = RepeatedSfixed32Flag{}
	mi := &file_flags_flags_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedSfixed32Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedSfixed32Flag) ProtoMessage() {}

func (x *RepeatedSfixed32Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedSfixed32Flag.ProtoReflect.Descriptor instead.
func (*RepeatedSfixed32Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{27}
}

func (x *RepeatedSfixed32Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedSfixed32Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedSfixed32Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedSfixed32Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedSfixed32Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedSfixed32Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedSfixed32Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedSfixed32Flag) GetDefault() []int32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedSfixed64Flag contains configuration for repeated sfixed64 fields with default value support.
type RepeatedSfixed64Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int64 `protobuf:"fixed64,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedSfixed64Flag) Reset() {
	*x = RepeatedSfixed64Flag{}
	mi := &file_flags_flags_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedSfixed64Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedSfixed64Flag) ProtoMessage() {}

func (x *RepeatedSfixed64Flag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedSfixed64Flag.ProtoReflect.Descriptor instead.
func (*RepeatedSfixed64Flag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{28}
}

func (x *RepeatedSfixed64Flag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedSfixed64Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedSfixed64Flag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedSfixed64Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedSfixed64Flag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedSfixed64Flag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedSfixed64Flag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedSfixed64Flag) GetDefault() []int64 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedBoolFlag contains configuration for repeated bool fields with default value support.
type RepeatedBoolFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []bool `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedBoolFlag) Reset() {
	*x = RepeatedBoolFlag{}
	mi := &file_flags_flags_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedBoolFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBoolFlag) ProtoMessage() {}

func (x *RepeatedBoolFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBoolFlag.ProtoReflect.Descriptor instead.
func (*RepeatedBoolFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{29}
}

func (x *RepeatedBoolFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedBoolFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedBoolFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedBoolFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedBoolFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedBoolFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedBoolFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedBoolFlag) GetDefault() []bool {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedStringFlag contains configuration for repeated string fields with default value support.
type RepeatedStringFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []string `protobuf:"bytes,8,rep,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedStringFlag) Reset() {
	*x = RepeatedStringFlag{}
	mi := &file_flags_flags_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedStringFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedStringFlag) ProtoMessage() {}

func (x *RepeatedStringFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedStringFlag.ProtoReflect.Descriptor instead.
func (*RepeatedStringFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{30}
}

func (x *RepeatedStringFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedStringFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedStringFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedStringFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedStringFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedStringFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedStringFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedStringFlag) GetDefault() []string {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedBytesFlag contains configuration for repeated bytes fields with default value support.
type RepeatedBytesFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Encoding specifies the encoding format for bytes fields. When unspecified,
	// defaults to base64 encoding.
	Encoding BytesEncodingType `protobuf:"varint,8,opt,name=encoding,proto3,enum=flags.BytesEncodingType" json:"encoding,omitempty"`
	// Default specifies the default values for this flag.
	Default       [][]byte `protobuf:"bytes,9,rep,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedBytesFlag) Reset() {
	*x = RepeatedBytesFlag{}
	mi := &file_flags_flags_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedBytesFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBytesFlag) ProtoMessage() {}

func (x *RepeatedBytesFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBytesFlag.ProtoReflect.Descriptor instead.
func (*RepeatedBytesFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{31}
}

func (x *RepeatedBytesFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedBytesFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedBytesFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedBytesFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedBytesFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedBytesFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedBytesFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedBytesFlag) GetEncoding() BytesEncodingType {
	if x != nil {
		return x.Encoding
	}
	return BytesEncodingType_BYTES_ENCODING_TYPE_UNSPECIFIED
}

func (x *RepeatedBytesFlag) GetDefault() [][]byte {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedEnumFlag contains configuration for repeated enum fields with default value support.
type RepeatedEnumFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []int32 `protobuf:"varint,8,rep,packed,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedEnumFlag) Reset() {
	*x = RepeatedEnumFlag{}
	mi := &file_flags_flags_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedEnumFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedEnumFlag) ProtoMessage() {}

func (x *RepeatedEnumFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedEnumFlag.ProtoReflect.Descriptor instead.
func (*RepeatedEnumFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{32}
}

func (x *RepeatedEnumFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedEnumFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedEnumFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedEnumFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedEnumFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedEnumFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedEnumFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedEnumFlag) GetDefault() []int32 {
	if x != nil {
		return x.Default
	}
	return nil
}

// RepeatedDurationFlag contains configuration for repeated duration fields with default value support.
type RepeatedDurationFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default values for this flag.
	Default       []string `protobuf:"bytes,8,rep,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedDurationFlag) Reset() {
	*x = RepeatedDurationFlag{}
	mi := &file_flags_flags_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedDurationFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedDurationFlag) ProtoMessage() {}

func (x *RepeatedDurationFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedDurationFlag.ProtoReflect.Descriptor instead.
func (*RepeatedDurationFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{33}
}

func (x *RepeatedDurationFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RepeatedDurationFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedDurationFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RepeatedDurationFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *RepeatedDurationFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *RepeatedDurationFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *RepeatedDurationFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *RepeatedDurationFlag) GetDefault() []string {
	if x != nil {
		return x.Default
	}
	return nil
}

// EnumFlag contains configuration for enum fields with default value support.
type EnumFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag as an int32.
	Default       *int32 `protobuf:"varint,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumFlag) Reset() {
	*x = EnumFlag{}
	mi := &file_flags_flags_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumFlag) ProtoMessage() {}

func (x *EnumFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumFlag.ProtoReflect.Descriptor instead.
func (*EnumFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{34}
}

func (x *EnumFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *EnumFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *EnumFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *EnumFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *EnumFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *EnumFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *EnumFlag) GetDefault() int32 {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return 0
}

// MapFlag contains configuration for map fields with default value support.
type MapFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default *string `protobuf:"bytes,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	// Format specifies the format for map fields. When unspecified,
	// defaults to JSON format.
	Format        MapFormatType `protobuf:"varint,9,opt,name=format,proto3,enum=flags.MapFormatType" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapFlag) Reset() {
	*x = MapFlag{}
	mi := &file_flags_flags_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFlag) ProtoMessage() {}

func (x *MapFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFlag.ProtoReflect.Descriptor instead.
func (*MapFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{35}
}

func (x *MapFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *MapFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *MapFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *MapFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *MapFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *MapFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *MapFlag) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

func (x *MapFlag) GetFormat() MapFormatType {
	if x != nil {
		return x.Format
	}
	return MapFormatType_MAP_FORMAT_TYPE_UNSPECIFIED
}

// DurationFlag contains configuration for duration fields with default value support.
type DurationFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Default specifies the default value for this flag.
	Default       *string `protobuf:"bytes,8,opt,name=default,proto3,oneof" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DurationFlag) Reset() {
	*x = DurationFlag{}
	mi := &file_flags_flags_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationFlag) ProtoMessage() {}

func (x *DurationFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationFlag.ProtoReflect.Descriptor instead.
func (*DurationFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{36}
}

func (x *DurationFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *DurationFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DurationFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *DurationFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *DurationFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *DurationFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *DurationFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *DurationFlag) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

// TimestampFlag contains the core configuration for all Timestamp flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
type TimestampFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string   `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	Formats         []string `protobuf:"bytes,8,rep,name=formats,proto3" json:"formats,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TimestampFlag) Reset() {
	*x = TimestampFlag{}
	mi := &file_flags_flags_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFlag) ProtoMessage() {}

func (x *TimestampFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFlag.ProtoReflect.Descriptor instead.
func (*TimestampFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{37}
}

func (x *TimestampFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *TimestampFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimestampFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *TimestampFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *TimestampFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *TimestampFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TimestampFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *TimestampFlag) GetFormats() []string {
	if x != nil {
		return x.Formats
	}
	return nil
}

// MessageFlag contains configuration for message fields that contain nested flag configurations.
//
// This message type is used when a protobuf field is itself a message that contains
// fields with flag configurations. It allows customization of how the nested flags
// are organized and presented in the command-line interface.
type MessageFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Nested controls whether to generate AddFlags method calls for this message field.
	// When set to true, the generated code will:
	//  1. Automatically initialize the message field if it's nil (prevents null pointer exceptions)
	//  2. Call AddFlags on the nested message fields that implement the flags.Interface
	//
	// When set to false, no flags will be generated for fields within this message,
	// even if they have flag configurations.
	Nested bool `protobuf:"varint,1,opt,name=nested,proto3" json:"nested,omitempty"`
	// Name specifies a custom name prefix for all flags in this message field.
	// This is useful for organizing flags into logical groups and avoiding
	// naming conflicts when multiple messages have similarly named fields.
	//
	// Examples:
	//   - name "server" would generate "--server.host", "--server.port"
	//   - name "database" would generate "--database.url", "--database.timeout"
	//   - empty name would generate "--host", "--port" (field names directly)
	//
	// The name is automatically converted to kebab-case format (underscores become hyphens)
	// and separated from the flag name with a dot.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageFlag) Reset() {
	*x = MessageFlag{}
	mi := &file_flags_flags_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFlag) ProtoMessage() {}

func (x *MessageFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFlag.ProtoReflect.Descriptor instead.
func (*MessageFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{38}
}

func (x *MessageFlag) GetNested() bool {
	if x != nil {
		return x.Nested
	}
	return false
}

func (x *MessageFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RepeatedFlags defines configuration for repeated fields (slices/arrays).
//
// This allows customization of how repeated values are handled in the CLI.
// The type oneof field determines the element type of the repeated field.
type RepeatedFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RepeatedFlags_Float
	//	*RepeatedFlags_Double
	//	*RepeatedFlags_Int32
	//	*RepeatedFlags_Int64
	//	*RepeatedFlags_Uint32
	//	*RepeatedFlags_Uint64
	//	*RepeatedFlags_Sint32
	//	*RepeatedFlags_Sint64
	//	*RepeatedFlags_Fixed32
	//	*RepeatedFlags_Fixed64
	//	*RepeatedFlags_Sfixed32
	//	*RepeatedFlags_Sfixed64
	//	*RepeatedFlags_Bool
	//	*RepeatedFlags_String_
	//	*RepeatedFlags_Bytes
	//	*RepeatedFlags_Enum
	//	*RepeatedFlags_Duration
	Type          isRepeatedFlags_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedFlags) Reset() {
	*x = RepeatedFlags{}
	mi := &file_flags_flags_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFlags) ProtoMessage() {}

func (x *RepeatedFlags) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFlags.ProtoReflect.Descriptor instead.
func (*RepeatedFlags) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{39}
}

func (x *RepeatedFlags) GetType() isRepeatedFlags_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RepeatedFlags) GetFloat() *RepeatedFloatFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *RepeatedFlags) GetDouble() *RepeatedDoubleFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *RepeatedFlags) GetInt32() *RepeatedInt32Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetInt64() *RepeatedInt64Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetUint32() *RepeatedUint32Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetUint64() *RepeatedUint64Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSint32() *RepeatedSint32Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSint64() *RepeatedSint64Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetFixed32() *RepeatedFixed32Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetFixed64() *RepeatedFixed64Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSfixed32() *RepeatedSfixed32Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSfixed64() *RepeatedSfixed64Flag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetBool() *RepeatedBoolFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *RepeatedFlags) GetString_() *RepeatedStringFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *RepeatedFlags) GetBytes() *RepeatedBytesFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *RepeatedFlags) GetEnum() *RepeatedEnumFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *RepeatedFlags) GetDuration() *RepeatedDurationFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

type isRepeatedFlags_Type interface {
	isRepeatedFlags_Type()
}

type RepeatedFlags_Float struct {
	// Supported types for repeated fields - each corresponds to its specific flag type
	// configuration that controls how individual elements are handled.
	Float *RepeatedFloatFlag `protobuf:"bytes,1,opt,name=float,proto3,oneof"` // Repeated 32-bit floating point
}

type RepeatedFlags_Double struct {
	Double *RepeatedDoubleFlag `protobuf:"bytes,2,opt,name=double,proto3,oneof"` // Repeated 64-bit floating point
}

type RepeatedFlags_Int32 struct {
	Int32 *RepeatedInt32Flag `protobuf:"bytes,3,opt,name=int32,proto3,oneof"` // Repeated 32-bit signed integer
}

type RepeatedFlags_Int64 struct {
	Int64 *RepeatedInt64Flag `protobuf:"bytes,4,opt,name=int64,proto3,oneof"` // Repeated 64-bit signed integer
}

type RepeatedFlags_Uint32 struct {
	Uint32 *RepeatedUint32Flag `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"` // Repeated 32-bit unsigned integer
}

type RepeatedFlags_Uint64 struct {
	Uint64 *RepeatedUint64Flag `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"` // Repeated 64-bit unsigned integer
}

type RepeatedFlags_Sint32 struct {
	Sint32 *RepeatedSint32Flag `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"` // Repeated 32-bit signed integer (zigzag)
}

type RepeatedFlags_Sint64 struct {
	Sint64 *RepeatedSint64Flag `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"` // Repeated 64-bit signed integer (zigzag)
}

type RepeatedFlags_Fixed32 struct {
	Fixed32 *RepeatedFixed32Flag `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"` // Repeated 32-bit fixed-point integer
}

type RepeatedFlags_Fixed64 struct {
	Fixed64 *RepeatedFixed64Flag `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"` // Repeated 64-bit fixed-point integer
}

type RepeatedFlags_Sfixed32 struct {
	Sfixed32 *RepeatedSfixed32Flag `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"` // Repeated 32-bit signed fixed-point integer
}

type RepeatedFlags_Sfixed64 struct {
	Sfixed64 *RepeatedSfixed64Flag `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"` // Repeated 64-bit signed fixed-point integer
}

type RepeatedFlags_Bool struct {
	Bool *RepeatedBoolFlag `protobuf:"bytes,13,opt,name=bool,proto3,oneof"` // Repeated boolean values
}

type RepeatedFlags_String_ struct {
	String_ *RepeatedStringFlag `protobuf:"bytes,14,opt,name=string,proto3,oneof"` // Repeated UTF-8 strings
}

type RepeatedFlags_Bytes struct {
	// Bytes field type with encoding type selection
	Bytes *RepeatedBytesFlag `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"` // Repeated arbitrary bytes with encoding format
}

type RepeatedFlags_Enum struct {
	Enum *RepeatedEnumFlag `protobuf:"bytes,16,opt,name=enum,proto3,oneof"` // Repeated enum values
}

type RepeatedFlags_Duration struct {
	Duration *RepeatedDurationFlag `protobuf:"bytes,17,opt,name=duration,proto3,oneof"` // Repeated duration values
}

func (*RepeatedFlags_Float) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Double) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Int32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Int64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Uint32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Uint64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sint32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sint64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Fixed32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Fixed64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sfixed32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sfixed64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Bool) isRepeatedFlags_Type() {}

func (*RepeatedFlags_String_) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Bytes) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Enum) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Duration) isRepeatedFlags_Type() {}

var file_flags_flags_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1171,
		Name:          "flags.disabled",
		Tag:           "varint,1171,opt,name=disabled",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1172,
		Name:          "flags.unexported",
		Tag:           "varint,1172,opt,name=unexported",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1173,
		Name:          "flags.allow_empty",
		Tag:           "varint,1173,opt,name=allow_empty",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldFlags)(nil),
		Field:         1171,
		Name:          "flags.value",
		Tag:           "bytes,1171,opt,name=value",
		Filename:      "flags/flags.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Disabled skips generation of flags for this entire message when set to true.
	// This takes precedence over all other flag generation options.
	//
	// optional bool disabled = 1171;
	E_Disabled = &file_flags_flags_proto_extTypes[0]
	// Unexported generates unexported flag methods for this message when set to true.
	// This is useful when you want to provide custom exported methods that call
	// the generated unexported methods.
	//
	// optional bool unexported = 1172;
	E_Unexported = &file_flags_flags_proto_extTypes[1]
	// AllowEmpty allows generation of AddFlags methods even when the message has
	// no fields configured with flag options. This is useful for messages that
	// want to provide a consistent interface or may have flags added in the future.
	//
	// optional bool allow_empty = 1173;
	E_AllowEmpty = &file_flags_flags_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Value specifies the flag configuration for this field. When set, the
	// protoc-gen-flags plugin will generate command-line flag bindings based
	// on the field type and configuration provided.
	//
	// optional flags.FieldFlags value = 1171;
	E_Value = &file_flags_flags_proto_extTypes[3]
)

var File_flags_flags_proto protoreflect.FileDescriptor

const file_flags_flags_proto_rawDesc = "" +
	"\n" +
	"\x11flags/flags.proto\x12\x05flags\x1a google/protobuf/descriptor.proto\"\xab\x02\n" +
	"\tBytesFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x124\n" +
	"\bencoding\x18\b \x01(\x0e2\x18.flags.BytesEncodingTypeR\bencoding\x12\x1d\n" +
	"\adefault\x18\t \x01(\fH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xcf\a\n" +
	"\n" +
	"FieldFlags\x12(\n" +
	"\x05float\x18\x01 \x01(\v2\x10.flags.FloatFlagH\x00R\x05float\x12+\n" +
	"\x06double\x18\x02 \x01(\v2\x11.flags.DoubleFlagH\x00R\x06double\x12(\n" +
	"\x05int32\x18\x03 \x01(\v2\x10.flags.Int32FlagH\x00R\x05int32\x12(\n" +
	"\x05int64\x18\x04 \x01(\v2\x10.flags.Int64FlagH\x00R\x05int64\x12+\n" +
	"\x06uint32\x18\x05 \x01(\v2\x11.flags.Uint32FlagH\x00R\x06uint32\x12+\n" +
	"\x06uint64\x18\x06 \x01(\v2\x11.flags.Uint64FlagH\x00R\x06uint64\x12+\n" +
	"\x06sint32\x18\a \x01(\v2\x11.flags.Sint32FlagH\x00R\x06sint32\x12+\n" +
	"\x06sint64\x18\b \x01(\v2\x11.flags.Sint64FlagH\x00R\x06sint64\x12.\n" +
	"\afixed32\x18\t \x01(\v2\x12.flags.Fixed32FlagH\x00R\afixed32\x12.\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x12.flags.Fixed64FlagH\x00R\afixed64\x121\n" +
	"\bsfixed32\x18\v \x01(\v2\x13.flags.Sfixed32FlagH\x00R\bsfixed32\x121\n" +
	"\bsfixed64\x18\f \x01(\v2\x13.flags.Sfixed64FlagH\x00R\bsfixed64\x12%\n" +
	"\x04bool\x18\r \x01(\v2\x0f.flags.BoolFlagH\x00R\x04bool\x12+\n" +
	"\x06string\x18\x0e \x01(\v2\x11.flags.StringFlagH\x00R\x06string\x12(\n" +
	"\x05bytes\x18\x0f \x01(\v2\x10.flags.BytesFlagH\x00R\x05bytes\x12%\n" +
	"\x04enum\x18\x10 \x01(\v2\x0f.flags.EnumFlagH\x00R\x04enum\x122\n" +
	"\brepeated\x18\x11 \x01(\v2\x14.flags.RepeatedFlagsH\x00R\brepeated\x12\"\n" +
	"\x03map\x18\x12 \x01(\v2\x0e.flags.MapFlagH\x00R\x03map\x121\n" +
	"\bduration\x18\x13 \x01(\v2\x13.flags.DurationFlagH\x00R\bduration\x124\n" +
	"\ttimestamp\x18\x14 \x01(\v2\x14.flags.TimestampFlagH\x00R\ttimestamp\x12.\n" +
	"\amessage\x18\x15 \x01(\v2\x12.flags.MessageFlagH\x00R\amessageB\x06\n" +
	"\x04type\"\xce\x01\n" +
	"\rPrimitiveFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\"\xf5\x01\n" +
	"\tFloatFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x02H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"DoubleFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x01H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf5\x01\n" +
	"\tInt32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x05H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf5\x01\n" +
	"\tInt64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x03H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"Uint32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\rH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"Uint64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x04H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"Sint32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x05H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"Sint64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x03H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf7\x01\n" +
	"\vFixed32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\aH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf7\x01\n" +
	"\vFixed64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x06H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf8\x01\n" +
	"\fSfixed32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x0fH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf8\x01\n" +
	"\fSfixed64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x10H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf4\x01\n" +
	"\bBoolFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\bH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xf6\x01\n" +
	"\n" +
	"StringFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\tH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xec\x01\n" +
	"\x11RepeatedFloatFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x02R\adefault\"\xed\x01\n" +
	"\x12RepeatedDoubleFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x01R\adefault\"\xec\x01\n" +
	"\x11RepeatedInt32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x05R\adefault\"\xec\x01\n" +
	"\x11RepeatedInt64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x03R\adefault\"\xed\x01\n" +
	"\x12RepeatedUint32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\rR\adefault\"\xed\x01\n" +
	"\x12RepeatedUint64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x04R\adefault\"\xed\x01\n" +
	"\x12RepeatedSint32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x05R\adefault\"\xed\x01\n" +
	"\x12RepeatedSint64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x03R\adefault\"\xee\x01\n" +
	"\x13RepeatedFixed32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\aR\adefault\"\xee\x01\n" +
	"\x13RepeatedFixed64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x06R\adefault\"\xef\x01\n" +
	"\x14RepeatedSfixed32Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x0fR\adefault\"\xef\x01\n" +
	"\x14RepeatedSfixed64Flag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x10R\adefault\"\xeb\x01\n" +
	"\x10RepeatedBoolFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\bR\adefault\"\xed\x01\n" +
	"\x12RepeatedStringFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\tR\adefault\"\xa2\x02\n" +
	"\x11RepeatedBytesFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x124\n" +
	"\bencoding\x18\b \x01(\x0e2\x18.flags.BytesEncodingTypeR\bencoding\x12\x18\n" +
	"\adefault\x18\t \x03(\fR\adefault\"\xeb\x01\n" +
	"\x10RepeatedEnumFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\x05R\adefault\"\xef\x01\n" +
	"\x14RepeatedDurationFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\adefault\x18\b \x03(\tR\adefault\"\xf4\x01\n" +
	"\bEnumFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\x05H\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xa1\x02\n" +
	"\aMapFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\tH\x00R\adefault\x88\x01\x01\x12,\n" +
	"\x06format\x18\t \x01(\x0e2\x14.flags.MapFormatTypeR\x06formatB\n" +
	"\n" +
	"\b_default\"\xf8\x01\n" +
	"\fDurationFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x1d\n" +
	"\adefault\x18\b \x01(\tH\x00R\adefault\x88\x01\x01B\n" +
	"\n" +
	"\b_default\"\xe8\x01\n" +
	"\rTimestampFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\aformats\x18\b \x03(\tR\aformats\"9\n" +
	"\vMessageFlag\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\bR\x06nested\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\x9c\a\n" +
	"\rRepeatedFlags\x120\n" +
	"\x05float\x18\x01 \x01(\v2\x18.flags.RepeatedFloatFlagH\x00R\x05float\x123\n" +
	"\x06double\x18\x02 \x01(\v2\x19.flags.RepeatedDoubleFlagH\x00R\x06double\x120\n" +
	"\x05int32\x18\x03 \x01(\v2\x18.flags.RepeatedInt32FlagH\x00R\x05int32\x120\n" +
	"\x05int64\x18\x04 \x01(\v2\x18.flags.RepeatedInt64FlagH\x00R\x05int64\x123\n" +
	"\x06uint32\x18\x05 \x01(\v2\x19.flags.RepeatedUint32FlagH\x00R\x06uint32\x123\n" +
	"\x06uint64\x18\x06 \x01(\v2\x19.flags.RepeatedUint64FlagH\x00R\x06uint64\x123\n" +
	"\x06sint32\x18\a \x01(\v2\x19.flags.RepeatedSint32FlagH\x00R\x06sint32\x123\n" +
	"\x06sint64\x18\b \x01(\v2\x19.flags.RepeatedSint64FlagH\x00R\x06sint64\x126\n" +
	"\afixed32\x18\t \x01(\v2\x1a.flags.RepeatedFixed32FlagH\x00R\afixed32\x126\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x1a.flags.RepeatedFixed64FlagH\x00R\afixed64\x129\n" +
	"\bsfixed32\x18\v \x01(\v2\x1b.flags.RepeatedSfixed32FlagH\x00R\bsfixed32\x129\n" +
	"\bsfixed64\x18\f \x01(\v2\x1b.flags.RepeatedSfixed64FlagH\x00R\bsfixed64\x12-\n" +
	"\x04bool\x18\r \x01(\v2\x17.flags.RepeatedBoolFlagH\x00R\x04bool\x123\n" +
	"\x06string\x18\x0e \x01(\v2\x19.flags.RepeatedStringFlagH\x00R\x06string\x120\n" +
	"\x05bytes\x18\x0f \x01(\v2\x18.flags.RepeatedBytesFlagH\x00R\x05bytes\x12-\n" +
	"\x04enum\x18\x10 \x01(\v2\x17.flags.RepeatedEnumFlagH\x00R\x04enum\x129\n" +
	"\bduration\x18\x11 \x01(\v2\x1b.flags.RepeatedDurationFlagH\x00R\bdurationB\x06\n" +
	"\x04type*u\n" +
	"\x11BytesEncodingType\x12#\n" +
	"\x1fBYTES_ENCODING_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aBYTES_ENCODING_TYPE_BASE64\x10\x01\x12\x1b\n" +
	"\x17BYTES_ENCODING_TYPE_HEX\x10\x02*\x93\x01\n" +
	"\rMapFormatType\x12\x1f\n" +
	"\x1bMAP_FORMAT_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14MAP_FORMAT_TYPE_JSON\x10\x01\x12$\n" +
	" MAP_FORMAT_TYPE_STRING_TO_STRING\x10\x02\x12!\n" +
	"\x1dMAP_FORMAT_TYPE_STRING_TO_INT\x10\x03:<\n" +
	"\bdisabled\x12\x1f.google.protobuf.MessageOptions\x18\x93\t \x01(\bR\bdisabled:@\n" +
	"\n" +
	"unexported\x12\x1f.google.protobuf.MessageOptions\x18\x94\t \x01(\bR\n" +
	"unexported:A\n" +
	"\vallow_empty\x12\x1f.google.protobuf.MessageOptions\x18\x95\t \x01(\bR\n" +
	"allowEmpty:G\n" +
	"\x05value\x12\x1d.google.protobuf.FieldOptions\x18\x93\t \x01(\v2\x11.flags.FieldFlagsR\x05valueB2Z0github.com/kunstack/protoc-gen-flags/flags;flagsb\x06proto3"

var (
	file_flags_flags_proto_rawDescOnce sync.Once
	file_flags_flags_proto_rawDescData []byte
)

func file_flags_flags_proto_rawDescGZIP() []byte {
	file_flags_flags_proto_rawDescOnce.Do(func() {
		file_flags_flags_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flags_flags_proto_rawDesc), len(file_flags_flags_proto_rawDesc)))
	})
	return file_flags_flags_proto_rawDescData
}

var file_flags_flags_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flags_flags_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_flags_flags_proto_goTypes = []any{
	(BytesEncodingType)(0),              // 0: flags.BytesEncodingType
	(MapFormatType)(0),                  // 1: flags.MapFormatType
	(*BytesFlag)(nil),                   // 2: flags.BytesFlag
	(*FieldFlags)(nil),                  // 3: flags.FieldFlags
	(*PrimitiveFlag)(nil),               // 4: flags.PrimitiveFlag
	(*FloatFlag)(nil),                   // 5: flags.FloatFlag
	(*DoubleFlag)(nil),                  // 6: flags.DoubleFlag
	(*Int32Flag)(nil),                   // 7: flags.Int32Flag
	(*Int64Flag)(nil),                   // 8: flags.Int64Flag
	(*Uint32Flag)(nil),                  // 9: flags.Uint32Flag
	(*Uint64Flag)(nil),                  // 10: flags.Uint64Flag
	(*Sint32Flag)(nil),                  // 11: flags.Sint32Flag
	(*Sint64Flag)(nil),                  // 12: flags.Sint64Flag
	(*Fixed32Flag)(nil),                 // 13: flags.Fixed32Flag
	(*Fixed64Flag)(nil),                 // 14: flags.Fixed64Flag
	(*Sfixed32Flag)(nil),                // 15: flags.Sfixed32Flag
	(*Sfixed64Flag)(nil),                // 16: flags.Sfixed64Flag
	(*BoolFlag)(nil),                    // 17: flags.BoolFlag
	(*StringFlag)(nil),                  // 18: flags.StringFlag
	(*RepeatedFloatFlag)(nil),           // 19: flags.RepeatedFloatFlag
	(*RepeatedDoubleFlag)(nil),          // 20: flags.RepeatedDoubleFlag
	(*RepeatedInt32Flag)(nil),           // 21: flags.RepeatedInt32Flag
	(*RepeatedInt64Flag)(nil),           // 22: flags.RepeatedInt64Flag
	(*RepeatedUint32Flag)(nil),          // 23: flags.RepeatedUint32Flag
	(*RepeatedUint64Flag)(nil),          // 24: flags.RepeatedUint64Flag
	(*RepeatedSint32Flag)(nil),          // 25: flags.RepeatedSint32Flag
	(*RepeatedSint64Flag)(nil),          // 26: flags.RepeatedSint64Flag
	(*RepeatedFixed32Flag)(nil),         // 27: flags.RepeatedFixed32Flag
	(*RepeatedFixed64Flag)(nil),         // 28: flags.RepeatedFixed64Flag
	(*RepeatedSfixed32Flag)(nil),        // 29: flags.RepeatedSfixed32Flag
	(*RepeatedSfixed64Flag)(nil),        // 30: flags.RepeatedSfixed64Flag
	(*RepeatedBoolFlag)(nil),            // 31: flags.RepeatedBoolFlag
	(*RepeatedStringFlag)(nil),          // 32: flags.RepeatedStringFlag
	(*RepeatedBytesFlag)(nil),           // 33: flags.RepeatedBytesFlag
	(*RepeatedEnumFlag)(nil),            // 34: flags.RepeatedEnumFlag
	(*RepeatedDurationFlag)(nil),        // 35: flags.RepeatedDurationFlag
	(*EnumFlag)(nil),                    // 36: flags.EnumFlag
	(*MapFlag)(nil),                     // 37: flags.MapFlag
	(*DurationFlag)(nil),                // 38: flags.DurationFlag
	(*TimestampFlag)(nil),               // 39: flags.TimestampFlag
	(*MessageFlag)(nil),                 // 40: flags.MessageFlag
	(*RepeatedFlags)(nil),               // 41: flags.RepeatedFlags
	(*descriptorpb.MessageOptions)(nil), // 42: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 43: google.protobuf.FieldOptions
}
var file_flags_flags_proto_depIdxs = []int32{
	0,  // 0: flags.BytesFlag.encoding:type_name -> flags.BytesEncodingType
	5,  // 1: flags.FieldFlags.float:type_name -> flags.FloatFlag
	6,  // 2: flags.FieldFlags.double:type_name -> flags.DoubleFlag
	7,  // 3: flags.FieldFlags.int32:type_name -> flags.Int32Flag
	8,  // 4: flags.FieldFlags.int64:type_name -> flags.Int64Flag
	9,  // 5: flags.FieldFlags.uint32:type_name -> flags.Uint32Flag
	10, // 6: flags.FieldFlags.uint64:type_name -> flags.Uint64Flag
	11, // 7: flags.FieldFlags.sint32:type_name -> flags.Sint32Flag
	12, // 8: flags.FieldFlags.sint64:type_name -> flags.Sint64Flag
	13, // 9: flags.FieldFlags.fixed32:type_name -> flags.Fixed32Flag
	14, // 10: flags.FieldFlags.fixed64:type_name -> flags.Fixed64Flag
	15, // 11: flags.FieldFlags.sfixed32:type_name -> flags.Sfixed32Flag
	16, // 12: flags.FieldFlags.sfixed64:type_name -> flags.Sfixed64Flag
	17, // 13: flags.FieldFlags.bool:type_name -> flags.BoolFlag
	18, // 14: flags.FieldFlags.string:type_name -> flags.StringFlag
	2,  // 15: flags.FieldFlags.bytes:type_name -> flags.BytesFlag
	36, // 16: flags.FieldFlags.enum:type_name -> flags.EnumFlag
	41, // 17: flags.FieldFlags.repeated:type_name -> flags.RepeatedFlags
	37, // 18: flags.FieldFlags.map:type_name -> flags.MapFlag
	38, // 19: flags.FieldFlags.duration:type_name -> flags.DurationFlag
	39, // 20: flags.FieldFlags.timestamp:type_name -> flags.TimestampFlag
	40, // 21: flags.FieldFlags.message:type_name -> flags.MessageFlag
	0,  // 22: flags.RepeatedBytesFlag.encoding:type_name -> flags.BytesEncodingType
	1,  // 23: flags.MapFlag.format:type_name -> flags.MapFormatType
	19, // 24: flags.RepeatedFlags.float:type_name -> flags.RepeatedFloatFlag
	20, // 25: flags.RepeatedFlags.double:type_name -> flags.RepeatedDoubleFlag
	21, // 26: flags.RepeatedFlags.int32:type_name -> flags.RepeatedInt32Flag
	22, // 27: flags.RepeatedFlags.int64:type_name -> flags.RepeatedInt64Flag
	23, // 28: flags.RepeatedFlags.uint32:type_name -> flags.RepeatedUint32Flag
	24, // 29: flags.RepeatedFlags.uint64:type_name -> flags.RepeatedUint64Flag
	25, // 30: flags.RepeatedFlags.sint32:type_name -> flags.RepeatedSint32Flag
	26, // 31: flags.RepeatedFlags.sint64:type_name -> flags.RepeatedSint64Flag
	27, // 32: flags.RepeatedFlags.fixed32:type_name -> flags.RepeatedFixed32Flag
	28, // 33: flags.RepeatedFlags.fixed64:type_name -> flags.RepeatedFixed64Flag
	29, // 34: flags.RepeatedFlags.sfixed32:type_name -> flags.RepeatedSfixed32Flag
	30, // 35: flags.RepeatedFlags.sfixed64:type_name -> flags.RepeatedSfixed64Flag
	31, // 36: flags.RepeatedFlags.bool:type_name -> flags.RepeatedBoolFlag
	32, // 37: flags.RepeatedFlags.string:type_name -> flags.RepeatedStringFlag
	33, // 38: flags.RepeatedFlags.bytes:type_name -> flags.RepeatedBytesFlag
	34, // 39: flags.RepeatedFlags.enum:type_name -> flags.RepeatedEnumFlag
	35, // 40: flags.RepeatedFlags.duration:type_name -> flags.RepeatedDurationFlag
	42, // 41: flags.disabled:extendee -> google.protobuf.MessageOptions
	42, // 42: flags.unexported:extendee -> google.protobuf.MessageOptions
	42, // 43: flags.allow_empty:extendee -> google.protobuf.MessageOptions
	43, // 44: flags.value:extendee -> google.protobuf.FieldOptions
	3,  // 45: flags.value:type_name -> flags.FieldFlags
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	45, // [45:46] is the sub-list for extension type_name
	41, // [41:45] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_flags_flags_proto_init() }
func file_flags_flags_proto_init() {
	if File_flags_flags_proto != nil {
		return
	}
	file_flags_flags_proto_msgTypes[0].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[1].OneofWrappers = []any{
		(*FieldFlags_Float)(nil),
		(*FieldFlags_Double)(nil),
		(*FieldFlags_Int32)(nil),
		(*FieldFlags_Int64)(nil),
		(*FieldFlags_Uint32)(nil),
		(*FieldFlags_Uint64)(nil),
		(*FieldFlags_Sint32)(nil),
		(*FieldFlags_Sint64)(nil),
		(*FieldFlags_Fixed32)(nil),
		(*FieldFlags_Fixed64)(nil),
		(*FieldFlags_Sfixed32)(nil),
		(*FieldFlags_Sfixed64)(nil),
		(*FieldFlags_Bool)(nil),
		(*FieldFlags_String_)(nil),
		(*FieldFlags_Bytes)(nil),
		(*FieldFlags_Enum)(nil),
		(*FieldFlags_Repeated)(nil),
		(*FieldFlags_Map)(nil),
		(*FieldFlags_Duration)(nil),
		(*FieldFlags_Timestamp)(nil),
		(*FieldFlags_Message)(nil),
	}
	file_flags_flags_proto_msgTypes[3].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[4].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[5].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[6].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[7].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[8].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[9].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[10].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[11].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[12].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[13].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[14].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[15].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[16].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[34].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[35].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[36].OneofWrappers = []any{}
	file_flags_flags_proto_msgTypes[39].OneofWrappers = []any{
		(*RepeatedFlags_Float)(nil),
		(*RepeatedFlags_Double)(nil),
		(*RepeatedFlags_Int32)(nil),
		(*RepeatedFlags_Int64)(nil),
		(*RepeatedFlags_Uint32)(nil),
		(*RepeatedFlags_Uint64)(nil),
		(*RepeatedFlags_Sint32)(nil),
		(*RepeatedFlags_Sint64)(nil),
		(*RepeatedFlags_Fixed32)(nil),
		(*RepeatedFlags_Fixed64)(nil),
		(*RepeatedFlags_Sfixed32)(nil),
		(*RepeatedFlags_Sfixed64)(nil),
		(*RepeatedFlags_Bool)(nil),
		(*RepeatedFlags_String_)(nil),
		(*RepeatedFlags_Bytes)(nil),
		(*RepeatedFlags_Enum)(nil),
		(*RepeatedFlags_Duration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flags_flags_proto_rawDesc), len(file_flags_flags_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   40,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_flags_flags_proto_goTypes,
		DependencyIndexes: file_flags_flags_proto_depIdxs,
		EnumInfos:         file_flags_flags_proto_enumTypes,
		MessageInfos:      file_flags_flags_proto_msgTypes,
		ExtensionInfos:    file_flags_flags_proto_extTypes,
	}.Build()
	File_flags_flags_proto = out.File
	file_flags_flags_proto_goTypes = nil
	file_flags_flags_proto_depIdxs = nil
}
