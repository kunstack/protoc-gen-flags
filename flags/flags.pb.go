// Copyright 2021 Aapeli <aapeli.nian@gmail.com>  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package flags provides protobuf extensions for generating command-line flag bindings.
//
// This package defines extensions that can be used in protobuf files to configure
// how AddFlags methods are generated for messages and fields. The generated code
// integrates with the spf13/pflag library to provide POSIX/GNU-style command-line
// flag parsing.
//
// # Message Level Options
//
// Message-level options control the overall flag generation behavior for a message:
//
//   option (flags.disabled) = true;     // Skip flag generation for this message
//   option (flags.unexported) = true;   // Generate unexported flag methods
//   option (flags.allow_empty) = true;  // Generate flags even without field configurations
//
// # Field Level Options
//
// Field-level options configure individual flag behavior:
//
//   string name = 1 [(flags.value).string = {
//     name: "custom-name"
//     short: "n"
//     usage: "Custom usage description"
//   }];
//
// # Supported Types
//
// All protobuf scalar types are supported, including:
//   - Numeric types: int32, int64, uint32, uint64, float, double, etc.
//   - String and bytes
//   - Boolean
//   - Enum types
//   - Repeated fields
//   - Well-known types: duration, timestamp

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: flags/flags.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore PACKAGE_SAME_DIRECTORY

package flags

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BytesEncodingType specifies the encoding format for bytes fields in command-line flags.
type BytesEncodingType int32

const (
	// BYTES_ENCODING_TYPE_UNSPECIFIED uses the default base64 encoding.
	BytesEncodingType_BYTES_ENCODING_TYPE_UNSPECIFIED BytesEncodingType = 0
	// BYTES_ENCODING_TYPE_BASE64 uses standard base64 encoding for bytes fields.
	BytesEncodingType_BYTES_ENCODING_TYPE_BASE64 BytesEncodingType = 1
	// BYTES_ENCODING_TYPE_HEX uses hexadecimal encoding for bytes fields.
	BytesEncodingType_BYTES_ENCODING_TYPE_HEX BytesEncodingType = 2
)

// Enum value maps for BytesEncodingType.
var (
	BytesEncodingType_name = map[int32]string{
		0: "BYTES_ENCODING_TYPE_UNSPECIFIED",
		1: "BYTES_ENCODING_TYPE_BASE64",
		2: "BYTES_ENCODING_TYPE_HEX",
	}
	BytesEncodingType_value = map[string]int32{
		"BYTES_ENCODING_TYPE_UNSPECIFIED": 0,
		"BYTES_ENCODING_TYPE_BASE64":      1,
		"BYTES_ENCODING_TYPE_HEX":         2,
	}
)

func (x BytesEncodingType) Enum() *BytesEncodingType {
	p := new(BytesEncodingType)
	*p = x
	return p
}

func (x BytesEncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BytesEncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_flags_flags_proto_enumTypes[0].Descriptor()
}

func (BytesEncodingType) Type() protoreflect.EnumType {
	return &file_flags_flags_proto_enumTypes[0]
}

func (x BytesEncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BytesEncodingType.Descriptor instead.
func (BytesEncodingType) EnumDescriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{0}
}

// BytesFlag contains configuration specifically for bytes fields with encoding type selection.
//
// This message allows customization of how bytes fields are encoded and decoded
// in command-line flags, supporting both base64 and hexadecimal formats.
type BytesFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	// Encoding specifies the encoding format for bytes fields. When unspecified,
	// defaults to base64 encoding.
	Encoding      BytesEncodingType `protobuf:"varint,8,opt,name=encoding,proto3,enum=flags.BytesEncodingType" json:"encoding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesFlag) Reset() {
	*x = BytesFlag{}
	mi := &file_flags_flags_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesFlag) ProtoMessage() {}

func (x *BytesFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesFlag.ProtoReflect.Descriptor instead.
func (*BytesFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{0}
}

func (x *BytesFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *BytesFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BytesFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *BytesFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *BytesFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *BytesFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BytesFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *BytesFlag) GetEncoding() BytesEncodingType {
	if x != nil {
		return x.Encoding
	}
	return BytesEncodingType_BYTES_ENCODING_TYPE_UNSPECIFIED
}

// FieldFlags encapsulates the flag configuration for each type of field.
//
// The oneof type field ensures type safety and allows the code generator to
// determine which pflag method to use (StringVarP, IntVarP, etc.) for each
// field type. Only one of the type fields should be set, corresponding to
// the actual protobuf field type.
type FieldFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldFlags_Float
	//	*FieldFlags_Double
	//	*FieldFlags_Int32
	//	*FieldFlags_Int64
	//	*FieldFlags_Uint32
	//	*FieldFlags_Uint64
	//	*FieldFlags_Sint32
	//	*FieldFlags_Sint64
	//	*FieldFlags_Fixed32
	//	*FieldFlags_Fixed64
	//	*FieldFlags_Sfixed32
	//	*FieldFlags_Sfixed64
	//	*FieldFlags_Bool
	//	*FieldFlags_String_
	//	*FieldFlags_Bytes
	//	*FieldFlags_Enum
	//	*FieldFlags_Repeated
	//	*FieldFlags_Map
	//	*FieldFlags_Duration
	//	*FieldFlags_Timestamp
	//	*FieldFlags_Message
	Type          isFieldFlags_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldFlags) Reset() {
	*x = FieldFlags{}
	mi := &file_flags_flags_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldFlags) ProtoMessage() {}

func (x *FieldFlags) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldFlags.ProtoReflect.Descriptor instead.
func (*FieldFlags) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{1}
}

func (x *FieldFlags) GetType() isFieldFlags_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldFlags) GetFloat() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *FieldFlags) GetDouble() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *FieldFlags) GetInt32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *FieldFlags) GetInt64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *FieldFlags) GetUint32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *FieldFlags) GetUint64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *FieldFlags) GetSint32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *FieldFlags) GetSint64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *FieldFlags) GetFixed32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *FieldFlags) GetFixed64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *FieldFlags) GetSfixed32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *FieldFlags) GetSfixed64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *FieldFlags) GetBool() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *FieldFlags) GetString_() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldFlags) GetBytes() *BytesFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *FieldFlags) GetEnum() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *FieldFlags) GetRepeated() *RepeatedFlags {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldFlags) GetMap() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *FieldFlags) GetDuration() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *FieldFlags) GetTimestamp() *TimestampFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

func (x *FieldFlags) GetMessage() *MessageFlag {
	if x != nil {
		if x, ok := x.Type.(*FieldFlags_Message); ok {
			return x.Message
		}
	}
	return nil
}

type isFieldFlags_Type interface {
	isFieldFlags_Type()
}

type FieldFlags_Float struct {
	// Scalar Field Types - all use PrimitiveFlag configuration
	Float *PrimitiveFlag `protobuf:"bytes,1,opt,name=float,proto3,oneof"` // 32-bit floating point
}

type FieldFlags_Double struct {
	Double *PrimitiveFlag `protobuf:"bytes,2,opt,name=double,proto3,oneof"` // 64-bit floating point
}

type FieldFlags_Int32 struct {
	Int32 *PrimitiveFlag `protobuf:"bytes,3,opt,name=int32,proto3,oneof"` // 32-bit signed integer
}

type FieldFlags_Int64 struct {
	Int64 *PrimitiveFlag `protobuf:"bytes,4,opt,name=int64,proto3,oneof"` // 64-bit signed integer
}

type FieldFlags_Uint32 struct {
	Uint32 *PrimitiveFlag `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"` // 32-bit unsigned integer
}

type FieldFlags_Uint64 struct {
	Uint64 *PrimitiveFlag `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"` // 64-bit unsigned integer
}

type FieldFlags_Sint32 struct {
	Sint32 *PrimitiveFlag `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"` // 32-bit signed integer (zigzag encoded)
}

type FieldFlags_Sint64 struct {
	Sint64 *PrimitiveFlag `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"` // 64-bit signed integer (zigzag encoded)
}

type FieldFlags_Fixed32 struct {
	Fixed32 *PrimitiveFlag `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"` // 32-bit fixed-point integer
}

type FieldFlags_Fixed64 struct {
	Fixed64 *PrimitiveFlag `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"` // 64-bit fixed-point integer
}

type FieldFlags_Sfixed32 struct {
	Sfixed32 *PrimitiveFlag `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"` // 32-bit signed fixed-point integer
}

type FieldFlags_Sfixed64 struct {
	Sfixed64 *PrimitiveFlag `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"` // 64-bit signed fixed-point integer
}

type FieldFlags_Bool struct {
	Bool *PrimitiveFlag `protobuf:"bytes,13,opt,name=bool,proto3,oneof"` // Boolean value
}

type FieldFlags_String_ struct {
	String_ *PrimitiveFlag `protobuf:"bytes,14,opt,name=string,proto3,oneof"` // UTF-8 string
}

type FieldFlags_Bytes struct {
	// Bytes field type with encoding type selection
	Bytes *BytesFlag `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"` // Arbitrary bytes with encoding format
}

type FieldFlags_Enum struct {
	// Complex Field Types
	Enum *PrimitiveFlag `protobuf:"bytes,16,opt,name=enum,proto3,oneof"` // Enum type
}

type FieldFlags_Repeated struct {
	Repeated *RepeatedFlags `protobuf:"bytes,17,opt,name=repeated,proto3,oneof"` // Repeated field (slice/array)
}

type FieldFlags_Map struct {
	Map *PrimitiveFlag `protobuf:"bytes,18,opt,name=map,proto3,oneof"` // Map field
}

type FieldFlags_Duration struct {
	// Well-Known Field Types
	Duration *PrimitiveFlag `protobuf:"bytes,19,opt,name=duration,proto3,oneof"` // google.protobuf.Duration
}

type FieldFlags_Timestamp struct {
	Timestamp *TimestampFlag `protobuf:"bytes,20,opt,name=timestamp,proto3,oneof"` // google.protobuf.Timestamp
}

type FieldFlags_Message struct {
	// Message field type - used for nested message configurations
	Message *MessageFlag `protobuf:"bytes,21,opt,name=message,proto3,oneof"`
}

func (*FieldFlags_Float) isFieldFlags_Type() {}

func (*FieldFlags_Double) isFieldFlags_Type() {}

func (*FieldFlags_Int32) isFieldFlags_Type() {}

func (*FieldFlags_Int64) isFieldFlags_Type() {}

func (*FieldFlags_Uint32) isFieldFlags_Type() {}

func (*FieldFlags_Uint64) isFieldFlags_Type() {}

func (*FieldFlags_Sint32) isFieldFlags_Type() {}

func (*FieldFlags_Sint64) isFieldFlags_Type() {}

func (*FieldFlags_Fixed32) isFieldFlags_Type() {}

func (*FieldFlags_Fixed64) isFieldFlags_Type() {}

func (*FieldFlags_Sfixed32) isFieldFlags_Type() {}

func (*FieldFlags_Sfixed64) isFieldFlags_Type() {}

func (*FieldFlags_Bool) isFieldFlags_Type() {}

func (*FieldFlags_String_) isFieldFlags_Type() {}

func (*FieldFlags_Bytes) isFieldFlags_Type() {}

func (*FieldFlags_Enum) isFieldFlags_Type() {}

func (*FieldFlags_Repeated) isFieldFlags_Type() {}

func (*FieldFlags_Map) isFieldFlags_Type() {}

func (*FieldFlags_Duration) isFieldFlags_Type() {}

func (*FieldFlags_Timestamp) isFieldFlags_Type() {}

func (*FieldFlags_Message) isFieldFlags_Type() {}

// PrimitiveFlag contains the core configuration for all primitive flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
type PrimitiveFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrimitiveFlag) Reset() {
	*x = PrimitiveFlag{}
	mi := &file_flags_flags_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimitiveFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveFlag) ProtoMessage() {}

func (x *PrimitiveFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveFlag.ProtoReflect.Descriptor instead.
func (*PrimitiveFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{2}
}

func (x *PrimitiveFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *PrimitiveFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrimitiveFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *PrimitiveFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *PrimitiveFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *PrimitiveFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *PrimitiveFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

// TimestampFlag contains the core configuration for all Timestamp flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
type TimestampFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disabled skips generation of flags for this field when set to true.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Name specifies a custom flag name. When empty, defaults to field name
	// converted to hyphenated format (e.g., hello_world -> hello-world).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Short specifies a short flag alias (single character).
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
	// Usage provides the description text shown in help output for this flag.
	Usage string `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty"`
	// Hidden hides this flag from help output when set to true.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Deprecated marks this flag as deprecated when set to true.
	Deprecated bool `protobuf:"varint,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// DeprecatedUsage provides additional context shown in help output for deprecated flags.
	DeprecatedUsage string   `protobuf:"bytes,7,opt,name=deprecated_usage,json=deprecatedUsage,proto3" json:"deprecated_usage,omitempty"`
	Formats         []string `protobuf:"bytes,8,rep,name=formats,proto3" json:"formats,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TimestampFlag) Reset() {
	*x = TimestampFlag{}
	mi := &file_flags_flags_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFlag) ProtoMessage() {}

func (x *TimestampFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFlag.ProtoReflect.Descriptor instead.
func (*TimestampFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{3}
}

func (x *TimestampFlag) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *TimestampFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimestampFlag) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *TimestampFlag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *TimestampFlag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *TimestampFlag) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TimestampFlag) GetDeprecatedUsage() string {
	if x != nil {
		return x.DeprecatedUsage
	}
	return ""
}

func (x *TimestampFlag) GetFormats() []string {
	if x != nil {
		return x.Formats
	}
	return nil
}

// MessageFlag contains configuration for message fields that contain nested flag configurations.
//
// This message type is used when a protobuf field is itself a message that contains
// fields with flag configurations. It allows customization of how the nested flags
// are organized and presented in the command-line interface.
type MessageFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Nested controls whether to generate AddFlags method calls for this message field.
	// When set to true, the generated code will call AddFlags on nested message fields
	// that implement the flags.Interface. When set to false, no flags will be generated
	// for fields within this message, even if they have flag configurations.
	Nested bool `protobuf:"varint,1,opt,name=nested,proto3" json:"nested,omitempty"`
	// Name specifies a custom name prefix for all flags in this message field.
	// This is useful for organizing flags into logical groups and avoiding
	// naming conflicts when multiple messages have similarly named fields.
	//
	// Examples:
	//   - name "server" would generate "--server.host", "--server.port"
	//   - name "database" would generate "--database.url", "--database.timeout"
	//   - empty name would generate "--host", "--port" (field names directly)
	//
	// The name is automatically converted to kebab-case format (underscores become hyphens)
	// and separated from the flag name with a dot.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageFlag) Reset() {
	*x = MessageFlag{}
	mi := &file_flags_flags_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFlag) ProtoMessage() {}

func (x *MessageFlag) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFlag.ProtoReflect.Descriptor instead.
func (*MessageFlag) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{4}
}

func (x *MessageFlag) GetNested() bool {
	if x != nil {
		return x.Nested
	}
	return false
}

func (x *MessageFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RepeatedFlags defines configuration for repeated fields (slices/arrays).
//
// This allows customization of how repeated values are handled in the CLI.
// The type oneof field determines the element type of the repeated field.
type RepeatedFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RepeatedFlags_Float
	//	*RepeatedFlags_Double
	//	*RepeatedFlags_Int32
	//	*RepeatedFlags_Int64
	//	*RepeatedFlags_Uint32
	//	*RepeatedFlags_Uint64
	//	*RepeatedFlags_Sint32
	//	*RepeatedFlags_Sint64
	//	*RepeatedFlags_Fixed32
	//	*RepeatedFlags_Fixed64
	//	*RepeatedFlags_Sfixed32
	//	*RepeatedFlags_Sfixed64
	//	*RepeatedFlags_Bool
	//	*RepeatedFlags_String_
	//	*RepeatedFlags_Bytes
	//	*RepeatedFlags_Enum
	//	*RepeatedFlags_Map
	//	*RepeatedFlags_Duration
	//	*RepeatedFlags_Timestamp
	Type          isRepeatedFlags_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedFlags) Reset() {
	*x = RepeatedFlags{}
	mi := &file_flags_flags_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFlags) ProtoMessage() {}

func (x *RepeatedFlags) ProtoReflect() protoreflect.Message {
	mi := &file_flags_flags_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFlags.ProtoReflect.Descriptor instead.
func (*RepeatedFlags) Descriptor() ([]byte, []int) {
	return file_flags_flags_proto_rawDescGZIP(), []int{5}
}

func (x *RepeatedFlags) GetType() isRepeatedFlags_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RepeatedFlags) GetFloat() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *RepeatedFlags) GetDouble() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *RepeatedFlags) GetInt32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetInt64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetUint32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetUint64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSint32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSint64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetFixed32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetFixed64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSfixed32() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *RepeatedFlags) GetSfixed64() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *RepeatedFlags) GetBool() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *RepeatedFlags) GetString_() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *RepeatedFlags) GetBytes() *BytesFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *RepeatedFlags) GetEnum() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *RepeatedFlags) GetMap() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *RepeatedFlags) GetDuration() *PrimitiveFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *RepeatedFlags) GetTimestamp() *TimestampFlag {
	if x != nil {
		if x, ok := x.Type.(*RepeatedFlags_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

type isRepeatedFlags_Type interface {
	isRepeatedFlags_Type()
}

type RepeatedFlags_Float struct {
	// Supported types for repeated fields - each corresponds to a PrimitiveFlag
	// configuration that controls how individual elements are handled.
	Float *PrimitiveFlag `protobuf:"bytes,1,opt,name=float,proto3,oneof"` // Repeated 32-bit floating point
}

type RepeatedFlags_Double struct {
	Double *PrimitiveFlag `protobuf:"bytes,2,opt,name=double,proto3,oneof"` // Repeated 64-bit floating point
}

type RepeatedFlags_Int32 struct {
	Int32 *PrimitiveFlag `protobuf:"bytes,3,opt,name=int32,proto3,oneof"` // Repeated 32-bit signed integer
}

type RepeatedFlags_Int64 struct {
	Int64 *PrimitiveFlag `protobuf:"bytes,4,opt,name=int64,proto3,oneof"` // Repeated 64-bit signed integer
}

type RepeatedFlags_Uint32 struct {
	Uint32 *PrimitiveFlag `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"` // Repeated 32-bit unsigned integer
}

type RepeatedFlags_Uint64 struct {
	Uint64 *PrimitiveFlag `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"` // Repeated 64-bit unsigned integer
}

type RepeatedFlags_Sint32 struct {
	Sint32 *PrimitiveFlag `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"` // Repeated 32-bit signed integer (zigzag)
}

type RepeatedFlags_Sint64 struct {
	Sint64 *PrimitiveFlag `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"` // Repeated 64-bit signed integer (zigzag)
}

type RepeatedFlags_Fixed32 struct {
	Fixed32 *PrimitiveFlag `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"` // Repeated 32-bit fixed-point integer
}

type RepeatedFlags_Fixed64 struct {
	Fixed64 *PrimitiveFlag `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"` // Repeated 64-bit fixed-point integer
}

type RepeatedFlags_Sfixed32 struct {
	Sfixed32 *PrimitiveFlag `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"` // Repeated 32-bit signed fixed-point integer
}

type RepeatedFlags_Sfixed64 struct {
	Sfixed64 *PrimitiveFlag `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"` // Repeated 64-bit signed fixed-point integer
}

type RepeatedFlags_Bool struct {
	Bool *PrimitiveFlag `protobuf:"bytes,13,opt,name=bool,proto3,oneof"` // Repeated boolean values
}

type RepeatedFlags_String_ struct {
	String_ *PrimitiveFlag `protobuf:"bytes,14,opt,name=string,proto3,oneof"` // Repeated UTF-8 strings
}

type RepeatedFlags_Bytes struct {
	// Bytes field type with encoding type selection
	Bytes *BytesFlag `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"` // Repeated arbitrary bytes with encoding format
}

type RepeatedFlags_Enum struct {
	Enum *PrimitiveFlag `protobuf:"bytes,16,opt,name=enum,proto3,oneof"` // Repeated enum values
}

type RepeatedFlags_Map struct {
	Map *PrimitiveFlag `protobuf:"bytes,17,opt,name=map,proto3,oneof"` // Repeated map entries
}

type RepeatedFlags_Duration struct {
	Duration *PrimitiveFlag `protobuf:"bytes,18,opt,name=duration,proto3,oneof"` // Repeated duration values
}

type RepeatedFlags_Timestamp struct {
	Timestamp *TimestampFlag `protobuf:"bytes,19,opt,name=timestamp,proto3,oneof"` // Repeated timestamp values
}

func (*RepeatedFlags_Float) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Double) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Int32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Int64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Uint32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Uint64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sint32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sint64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Fixed32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Fixed64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sfixed32) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Sfixed64) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Bool) isRepeatedFlags_Type() {}

func (*RepeatedFlags_String_) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Bytes) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Enum) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Map) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Duration) isRepeatedFlags_Type() {}

func (*RepeatedFlags_Timestamp) isRepeatedFlags_Type() {}

var file_flags_flags_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1171,
		Name:          "flags.disabled",
		Tag:           "varint,1171,opt,name=disabled",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1172,
		Name:          "flags.unexported",
		Tag:           "varint,1172,opt,name=unexported",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1173,
		Name:          "flags.allow_empty",
		Tag:           "varint,1173,opt,name=allow_empty",
		Filename:      "flags/flags.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldFlags)(nil),
		Field:         1171,
		Name:          "flags.value",
		Tag:           "bytes,1171,opt,name=value",
		Filename:      "flags/flags.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Disabled skips generation of flags for this entire message when set to true.
	// This takes precedence over all other flag generation options.
	//
	// optional bool disabled = 1171;
	E_Disabled = &file_flags_flags_proto_extTypes[0]
	// Unexported generates unexported flag methods for this message when set to true.
	// This is useful when you want to provide custom exported methods that call
	// the generated unexported methods.
	//
	// optional bool unexported = 1172;
	E_Unexported = &file_flags_flags_proto_extTypes[1]
	// AllowEmpty allows generation of AddFlags methods even when the message has
	// no fields configured with flag options. This is useful for messages that
	// want to provide a consistent interface or may have flags added in the future.
	//
	// optional bool allow_empty = 1173;
	E_AllowEmpty = &file_flags_flags_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Value specifies the flag configuration for this field. When set, the
	// protoc-gen-flags plugin will generate command-line flag bindings based
	// on the field type and configuration provided.
	//
	// optional flags.FieldFlags value = 1171;
	E_Value = &file_flags_flags_proto_extTypes[3]
)

var File_flags_flags_proto protoreflect.FileDescriptor

const file_flags_flags_proto_rawDesc = "" +
	"\n" +
	"\x11flags/flags.proto\x12\x05flags\x1a google/protobuf/descriptor.proto\"\x80\x02\n" +
	"\tBytesFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x124\n" +
	"\bencoding\x18\b \x01(\x0e2\x18.flags.BytesEncodingTypeR\bencoding\"\x84\b\n" +
	"\n" +
	"FieldFlags\x12,\n" +
	"\x05float\x18\x01 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05float\x12.\n" +
	"\x06double\x18\x02 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06double\x12,\n" +
	"\x05int32\x18\x03 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05int32\x12,\n" +
	"\x05int64\x18\x04 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05int64\x12.\n" +
	"\x06uint32\x18\x05 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06uint32\x12.\n" +
	"\x06uint64\x18\x06 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06uint64\x12.\n" +
	"\x06sint32\x18\a \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06sint32\x12.\n" +
	"\x06sint64\x18\b \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06sint64\x120\n" +
	"\afixed32\x18\t \x01(\v2\x14.flags.PrimitiveFlagH\x00R\afixed32\x120\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x14.flags.PrimitiveFlagH\x00R\afixed64\x122\n" +
	"\bsfixed32\x18\v \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bsfixed32\x122\n" +
	"\bsfixed64\x18\f \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bsfixed64\x12*\n" +
	"\x04bool\x18\r \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x04bool\x12.\n" +
	"\x06string\x18\x0e \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06string\x12(\n" +
	"\x05bytes\x18\x0f \x01(\v2\x10.flags.BytesFlagH\x00R\x05bytes\x12*\n" +
	"\x04enum\x18\x10 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x04enum\x122\n" +
	"\brepeated\x18\x11 \x01(\v2\x14.flags.RepeatedFlagsH\x00R\brepeated\x12(\n" +
	"\x03map\x18\x12 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x03map\x122\n" +
	"\bduration\x18\x13 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bduration\x124\n" +
	"\ttimestamp\x18\x14 \x01(\v2\x14.flags.TimestampFlagH\x00R\ttimestamp\x12.\n" +
	"\amessage\x18\x15 \x01(\v2\x12.flags.MessageFlagH\x00R\amessageB\x06\n" +
	"\x04type\"\xce\x01\n" +
	"\rPrimitiveFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\"\xe8\x01\n" +
	"\rTimestampFlag\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05short\x18\x03 \x01(\tR\x05short\x12\x14\n" +
	"\x05usage\x18\x04 \x01(\tR\x05usage\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x06 \x01(\bR\n" +
	"deprecated\x12)\n" +
	"\x10deprecated_usage\x18\a \x01(\tR\x0fdeprecatedUsage\x12\x18\n" +
	"\aformats\x18\b \x03(\tR\aformats\"9\n" +
	"\vMessageFlag\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\bR\x06nested\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xa3\a\n" +
	"\rRepeatedFlags\x12,\n" +
	"\x05float\x18\x01 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05float\x12.\n" +
	"\x06double\x18\x02 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06double\x12,\n" +
	"\x05int32\x18\x03 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05int32\x12,\n" +
	"\x05int64\x18\x04 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x05int64\x12.\n" +
	"\x06uint32\x18\x05 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06uint32\x12.\n" +
	"\x06uint64\x18\x06 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06uint64\x12.\n" +
	"\x06sint32\x18\a \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06sint32\x12.\n" +
	"\x06sint64\x18\b \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06sint64\x120\n" +
	"\afixed32\x18\t \x01(\v2\x14.flags.PrimitiveFlagH\x00R\afixed32\x120\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x14.flags.PrimitiveFlagH\x00R\afixed64\x122\n" +
	"\bsfixed32\x18\v \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bsfixed32\x122\n" +
	"\bsfixed64\x18\f \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bsfixed64\x12*\n" +
	"\x04bool\x18\r \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x04bool\x12.\n" +
	"\x06string\x18\x0e \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x06string\x12(\n" +
	"\x05bytes\x18\x0f \x01(\v2\x10.flags.BytesFlagH\x00R\x05bytes\x12*\n" +
	"\x04enum\x18\x10 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x04enum\x12(\n" +
	"\x03map\x18\x11 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\x03map\x122\n" +
	"\bduration\x18\x12 \x01(\v2\x14.flags.PrimitiveFlagH\x00R\bduration\x124\n" +
	"\ttimestamp\x18\x13 \x01(\v2\x14.flags.TimestampFlagH\x00R\ttimestampB\x06\n" +
	"\x04type*u\n" +
	"\x11BytesEncodingType\x12#\n" +
	"\x1fBYTES_ENCODING_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aBYTES_ENCODING_TYPE_BASE64\x10\x01\x12\x1b\n" +
	"\x17BYTES_ENCODING_TYPE_HEX\x10\x02:<\n" +
	"\bdisabled\x12\x1f.google.protobuf.MessageOptions\x18\x93\t \x01(\bR\bdisabled:@\n" +
	"\n" +
	"unexported\x12\x1f.google.protobuf.MessageOptions\x18\x94\t \x01(\bR\n" +
	"unexported:A\n" +
	"\vallow_empty\x12\x1f.google.protobuf.MessageOptions\x18\x95\t \x01(\bR\n" +
	"allowEmpty:G\n" +
	"\x05value\x12\x1d.google.protobuf.FieldOptions\x18\x93\t \x01(\v2\x11.flags.FieldFlagsR\x05valueB2Z0github.com/kunstack/protoc-gen-flags/flags;flagsb\x06proto3"

var (
	file_flags_flags_proto_rawDescOnce sync.Once
	file_flags_flags_proto_rawDescData []byte
)

func file_flags_flags_proto_rawDescGZIP() []byte {
	file_flags_flags_proto_rawDescOnce.Do(func() {
		file_flags_flags_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flags_flags_proto_rawDesc), len(file_flags_flags_proto_rawDesc)))
	})
	return file_flags_flags_proto_rawDescData
}

var file_flags_flags_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flags_flags_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_flags_flags_proto_goTypes = []any{
	(BytesEncodingType)(0),              // 0: flags.BytesEncodingType
	(*BytesFlag)(nil),                   // 1: flags.BytesFlag
	(*FieldFlags)(nil),                  // 2: flags.FieldFlags
	(*PrimitiveFlag)(nil),               // 3: flags.PrimitiveFlag
	(*TimestampFlag)(nil),               // 4: flags.TimestampFlag
	(*MessageFlag)(nil),                 // 5: flags.MessageFlag
	(*RepeatedFlags)(nil),               // 6: flags.RepeatedFlags
	(*descriptorpb.MessageOptions)(nil), // 7: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 8: google.protobuf.FieldOptions
}
var file_flags_flags_proto_depIdxs = []int32{
	0,  // 0: flags.BytesFlag.encoding:type_name -> flags.BytesEncodingType
	3,  // 1: flags.FieldFlags.float:type_name -> flags.PrimitiveFlag
	3,  // 2: flags.FieldFlags.double:type_name -> flags.PrimitiveFlag
	3,  // 3: flags.FieldFlags.int32:type_name -> flags.PrimitiveFlag
	3,  // 4: flags.FieldFlags.int64:type_name -> flags.PrimitiveFlag
	3,  // 5: flags.FieldFlags.uint32:type_name -> flags.PrimitiveFlag
	3,  // 6: flags.FieldFlags.uint64:type_name -> flags.PrimitiveFlag
	3,  // 7: flags.FieldFlags.sint32:type_name -> flags.PrimitiveFlag
	3,  // 8: flags.FieldFlags.sint64:type_name -> flags.PrimitiveFlag
	3,  // 9: flags.FieldFlags.fixed32:type_name -> flags.PrimitiveFlag
	3,  // 10: flags.FieldFlags.fixed64:type_name -> flags.PrimitiveFlag
	3,  // 11: flags.FieldFlags.sfixed32:type_name -> flags.PrimitiveFlag
	3,  // 12: flags.FieldFlags.sfixed64:type_name -> flags.PrimitiveFlag
	3,  // 13: flags.FieldFlags.bool:type_name -> flags.PrimitiveFlag
	3,  // 14: flags.FieldFlags.string:type_name -> flags.PrimitiveFlag
	1,  // 15: flags.FieldFlags.bytes:type_name -> flags.BytesFlag
	3,  // 16: flags.FieldFlags.enum:type_name -> flags.PrimitiveFlag
	6,  // 17: flags.FieldFlags.repeated:type_name -> flags.RepeatedFlags
	3,  // 18: flags.FieldFlags.map:type_name -> flags.PrimitiveFlag
	3,  // 19: flags.FieldFlags.duration:type_name -> flags.PrimitiveFlag
	4,  // 20: flags.FieldFlags.timestamp:type_name -> flags.TimestampFlag
	5,  // 21: flags.FieldFlags.message:type_name -> flags.MessageFlag
	3,  // 22: flags.RepeatedFlags.float:type_name -> flags.PrimitiveFlag
	3,  // 23: flags.RepeatedFlags.double:type_name -> flags.PrimitiveFlag
	3,  // 24: flags.RepeatedFlags.int32:type_name -> flags.PrimitiveFlag
	3,  // 25: flags.RepeatedFlags.int64:type_name -> flags.PrimitiveFlag
	3,  // 26: flags.RepeatedFlags.uint32:type_name -> flags.PrimitiveFlag
	3,  // 27: flags.RepeatedFlags.uint64:type_name -> flags.PrimitiveFlag
	3,  // 28: flags.RepeatedFlags.sint32:type_name -> flags.PrimitiveFlag
	3,  // 29: flags.RepeatedFlags.sint64:type_name -> flags.PrimitiveFlag
	3,  // 30: flags.RepeatedFlags.fixed32:type_name -> flags.PrimitiveFlag
	3,  // 31: flags.RepeatedFlags.fixed64:type_name -> flags.PrimitiveFlag
	3,  // 32: flags.RepeatedFlags.sfixed32:type_name -> flags.PrimitiveFlag
	3,  // 33: flags.RepeatedFlags.sfixed64:type_name -> flags.PrimitiveFlag
	3,  // 34: flags.RepeatedFlags.bool:type_name -> flags.PrimitiveFlag
	3,  // 35: flags.RepeatedFlags.string:type_name -> flags.PrimitiveFlag
	1,  // 36: flags.RepeatedFlags.bytes:type_name -> flags.BytesFlag
	3,  // 37: flags.RepeatedFlags.enum:type_name -> flags.PrimitiveFlag
	3,  // 38: flags.RepeatedFlags.map:type_name -> flags.PrimitiveFlag
	3,  // 39: flags.RepeatedFlags.duration:type_name -> flags.PrimitiveFlag
	4,  // 40: flags.RepeatedFlags.timestamp:type_name -> flags.TimestampFlag
	7,  // 41: flags.disabled:extendee -> google.protobuf.MessageOptions
	7,  // 42: flags.unexported:extendee -> google.protobuf.MessageOptions
	7,  // 43: flags.allow_empty:extendee -> google.protobuf.MessageOptions
	8,  // 44: flags.value:extendee -> google.protobuf.FieldOptions
	2,  // 45: flags.value:type_name -> flags.FieldFlags
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	45, // [45:46] is the sub-list for extension type_name
	41, // [41:45] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_flags_flags_proto_init() }
func file_flags_flags_proto_init() {
	if File_flags_flags_proto != nil {
		return
	}
	file_flags_flags_proto_msgTypes[1].OneofWrappers = []any{
		(*FieldFlags_Float)(nil),
		(*FieldFlags_Double)(nil),
		(*FieldFlags_Int32)(nil),
		(*FieldFlags_Int64)(nil),
		(*FieldFlags_Uint32)(nil),
		(*FieldFlags_Uint64)(nil),
		(*FieldFlags_Sint32)(nil),
		(*FieldFlags_Sint64)(nil),
		(*FieldFlags_Fixed32)(nil),
		(*FieldFlags_Fixed64)(nil),
		(*FieldFlags_Sfixed32)(nil),
		(*FieldFlags_Sfixed64)(nil),
		(*FieldFlags_Bool)(nil),
		(*FieldFlags_String_)(nil),
		(*FieldFlags_Bytes)(nil),
		(*FieldFlags_Enum)(nil),
		(*FieldFlags_Repeated)(nil),
		(*FieldFlags_Map)(nil),
		(*FieldFlags_Duration)(nil),
		(*FieldFlags_Timestamp)(nil),
		(*FieldFlags_Message)(nil),
	}
	file_flags_flags_proto_msgTypes[5].OneofWrappers = []any{
		(*RepeatedFlags_Float)(nil),
		(*RepeatedFlags_Double)(nil),
		(*RepeatedFlags_Int32)(nil),
		(*RepeatedFlags_Int64)(nil),
		(*RepeatedFlags_Uint32)(nil),
		(*RepeatedFlags_Uint64)(nil),
		(*RepeatedFlags_Sint32)(nil),
		(*RepeatedFlags_Sint64)(nil),
		(*RepeatedFlags_Fixed32)(nil),
		(*RepeatedFlags_Fixed64)(nil),
		(*RepeatedFlags_Sfixed32)(nil),
		(*RepeatedFlags_Sfixed64)(nil),
		(*RepeatedFlags_Bool)(nil),
		(*RepeatedFlags_String_)(nil),
		(*RepeatedFlags_Bytes)(nil),
		(*RepeatedFlags_Enum)(nil),
		(*RepeatedFlags_Map)(nil),
		(*RepeatedFlags_Duration)(nil),
		(*RepeatedFlags_Timestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flags_flags_proto_rawDesc), len(file_flags_flags_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_flags_flags_proto_goTypes,
		DependencyIndexes: file_flags_flags_proto_depIdxs,
		EnumInfos:         file_flags_flags_proto_enumTypes,
		MessageInfos:      file_flags_flags_proto_msgTypes,
		ExtensionInfos:    file_flags_flags_proto_extTypes,
	}.Build()
	File_flags_flags_proto = out.File
	file_flags_flags_proto_goTypes = nil
	file_flags_flags_proto_depIdxs = nil
}
