// Copyright 2021 Aapeli <aapeli.nian@gmail.com>  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package flags provides protobuf extensions for generating command-line flag bindings.
//
// This package defines extensions that can be used in protobuf files to configure
// how AddFlags methods are generated for messages and fields. The generated code
// integrates with the spf13/pflag library to provide POSIX/GNU-style command-line
// flag parsing.
//
// # Message Level Options
//
// Message-level options control the overall flag generation behavior for a message:
//
//   option (flags.disabled) = true;     // Skip flag generation for this message
//   option (flags.unexported) = true;   // Generate unexported flag methods
//   option (flags.allow_empty) = true;  // Generate flags even without field configurations
//
// # Field Level Options
//
// Field-level options configure individual flag behavior:
//
//   string name = 1 [(flags.value).string = {
//     name: "custom-name"
//     short: "n"
//     usage: "Custom usage description"
//     default: "default-value"
//   }];
//
// # Supported Types
//
// All protobuf scalar types are supported, including:
//   - Numeric types: int32, int64, uint32, uint64, float, double, etc.
//   - String and bytes
//   - Boolean
//   - Enum types
//   - Repeated fields
//   - Well-known types: duration, timestamp
syntax = "proto3";

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
package flags;

import "google/protobuf/descriptor.proto";

// buf:lint:ignore PACKAGE_SAME_GO_PACKAGE
option go_package = "github.com/kunstack/protoc-gen-flags/flags;flags";

// MessageOptions extends google.protobuf.MessageOptions to provide message-level
// control over flag generation behavior.
extend google.protobuf.MessageOptions {
  // Disabled skips generation of flags for this entire message when set to true.
  // This takes precedence over all other flag generation options.
  bool disabled = 1171;

  // Unexported generates unexported flag methods for this message when set to true.
  // This is useful when you want to provide custom exported methods that call
  // the generated unexported methods.
  bool unexported = 1172;

  // AllowEmpty allows generation of AddFlags methods even when the message has
  // no fields configured with flag options. This is useful for messages that
  // want to provide a consistent interface or may have flags added in the future.
  bool allow_empty = 1173;
}

// FieldOptions extends google.protobuf.FieldOptions to provide field-level
// configuration for flag generation.
extend google.protobuf.FieldOptions {
  // Value specifies the flag configuration for this field. When set, the
  // protoc-gen-flags plugin will generate command-line flag bindings based
  // on the field type and configuration provided.
  FieldFlags value = 1171;
}

// BytesEncodingType specifies the encoding format for bytes fields in command-line flags.
enum BytesEncodingType {
  // BYTES_ENCODING_TYPE_UNSPECIFIED uses the default base64 encoding.
  BYTES_ENCODING_TYPE_UNSPECIFIED = 0;

  // BYTES_ENCODING_TYPE_BASE64 uses standard base64 encoding for bytes fields.
  BYTES_ENCODING_TYPE_BASE64 = 1;

  // BYTES_ENCODING_TYPE_HEX uses hexadecimal encoding for bytes fields.
  BYTES_ENCODING_TYPE_HEX = 2;
}

// BytesFlag contains configuration specifically for bytes fields with encoding type selection.
//
// This message allows customization of how bytes fields are encoded and decoded
// in command-line flags, supporting both base64 and hexadecimal formats.
message BytesFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Encoding specifies the encoding format for bytes fields. When unspecified,
  // defaults to base64 encoding.
  BytesEncodingType encoding = 8;
}

// FieldFlags encapsulates the flag configuration for each type of field.
//
// The oneof type field ensures type safety and allows the code generator to
// determine which pflag method to use (StringVarP, IntVarP, etc.) for each
// field type. Only one of the type fields should be set, corresponding to
// the actual protobuf field type.
message FieldFlags {
  oneof type {
    // Scalar Field Types - each type has its own flag configuration with default value support
    FloatFlag float = 1; // 32-bit floating point
    DoubleFlag double = 2; // 64-bit floating point
    Int32Flag int32 = 3; // 32-bit signed integer
    Int64Flag int64 = 4; // 64-bit signed integer
    Uint32Flag uint32 = 5; // 32-bit unsigned integer
    Uint64Flag uint64 = 6; // 64-bit unsigned integer
    Sint32Flag sint32 = 7; // 32-bit signed integer (zigzag encoded)
    Sint64Flag sint64 = 8; // 64-bit signed integer (zigzag encoded)
    Fixed32Flag fixed32 = 9; // 32-bit fixed-point integer
    Fixed64Flag fixed64 = 10; // 64-bit fixed-point integer
    Sfixed32Flag sfixed32 = 11; // 32-bit signed fixed-point integer
    Sfixed64Flag sfixed64 = 12; // 64-bit signed fixed-point integer
    BoolFlag bool = 13; // Boolean value
    StringFlag string = 14; // UTF-8 string

    // Bytes field type with encoding type selection
    BytesFlag bytes = 15; // Arbitrary bytes with encoding format

    // Complex Field Types
    EnumFlag enum = 16; // Enum type
    RepeatedFlags repeated = 17; // Repeated field (slice/array)
    MapFlag map = 18; // Map field

    // Well-Known Field Types
    DurationFlag duration = 19; // google.protobuf.Duration
    TimestampFlag timestamp = 20; // google.protobuf.Timestamp

    // Message field type - used for nested message configurations
    MessageFlag message = 21;
  }
}

// PrimitiveFlag contains the core configuration for all primitive flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
message PrimitiveFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;
}

// FloatFlag contains configuration for float32 fields with default value support.
message FloatFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  float default = 8;
}

// DoubleFlag contains configuration for float64 fields with default value support.
message DoubleFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  double default = 8;
}

// Int32Flag contains configuration for int32 fields with default value support.
message Int32Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  int32 default = 8;
}

// Int64Flag contains configuration for int64 fields with default value support.
message Int64Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  int64 default = 8;
}

// Uint32Flag contains configuration for uint32 fields with default value support.
message Uint32Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  uint32 default = 8;
}

// Uint64Flag contains configuration for uint64 fields with default value support.
message Uint64Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  uint64 default = 8;
}

// Sint32Flag contains configuration for sint32 fields with default value support.
message Sint32Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  int32 default = 8;
}

// Sint64Flag contains configuration for sint64 fields with default value support.
message Sint64Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  int64 default = 8;
}

// Fixed32Flag contains configuration for fixed32 fields with default value support.
message Fixed32Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  fixed32 default = 8;
}

// Fixed64Flag contains configuration for fixed64 fields with default value support.
message Fixed64Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  fixed64 default = 8;
}

// Sfixed32Flag contains configuration for sfixed32 fields with default value support.
message Sfixed32Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  sfixed32 default = 8;
}

// Sfixed64Flag contains configuration for sfixed64 fields with default value support.
message Sfixed64Flag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  sfixed64 default = 8;
}

// BoolFlag contains configuration for bool fields with default value support.
message BoolFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  bool default = 8;
}

// StringFlag contains configuration for string fields with default value support.
message StringFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag as a JSON string.
  string default = 8;
}

// EnumFlag contains configuration for enum fields with default value support.
message EnumFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag as an int32.
  int32 default = 8;
}

// MapFormatType specifies the format for map fields in command-line flags.
enum MapFormatType {
  // MAP_FORMAT_TYPE_UNSPECIFIED uses the default format (JSON).
  MAP_FORMAT_TYPE_UNSPECIFIED = 0;

  // MAP_FORMAT_TYPE_JSON uses JSON format for the entire map.
  MAP_FORMAT_TYPE_JSON = 1;

  // MAP_FORMAT_TYPE_STRING_TO_STRING uses string keys and string values.
  MAP_FORMAT_TYPE_STRING_TO_STRING = 2;

  // MAP_FORMAT_TYPE_STRING_TO_INT uses string keys and int values.
  MAP_FORMAT_TYPE_STRING_TO_INT = 3;
}

// MapFlag contains configuration for map fields with default value support.
message MapFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  string default = 8;

  // Format specifies the format for map fields. When unspecified,
  // defaults to JSON format.
  MapFormatType format = 9;
}

// DurationFlag contains configuration for duration fields with default value support.
message DurationFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  // Default specifies the default value for this flag.
  string default = 8;
}

// TimestampFlag contains the core configuration for all Timestamp flag types.
//
// This message provides a comprehensive set of options for customizing flag
// behavior, appearance, and integration with environment variables.
message TimestampFlag {
  // Disabled skips generation of flags for this field when set to true.
  bool disabled = 1;

  // Name specifies a custom flag name. When empty, defaults to field name
  // converted to hyphenated format (e.g., hello_world -> hello-world).
  string name = 2;

  // Short specifies a short flag alias (single character).
  string short = 3;

  // Usage provides the description text shown in help output for this flag.
  string usage = 4;

  // Hidden hides this flag from help output when set to true.
  bool hidden = 5;

  // Deprecated marks this flag as deprecated when set to true.
  bool deprecated = 6;

  // DeprecatedUsage provides additional context shown in help output for deprecated flags.
  string deprecated_usage = 7;

  repeated string formats = 8;
}

// MessageFlag contains configuration for message fields that contain nested flag configurations.
//
// This message type is used when a protobuf field is itself a message that contains
// fields with flag configurations. It allows customization of how the nested flags
// are organized and presented in the command-line interface.
message MessageFlag {
  // Nested controls whether to generate AddFlags method calls for this message field.
  // When set to true, the generated code will:
  //   1. Automatically initialize the message field if it's nil (prevents null pointer exceptions)
  //   2. Call AddFlags on the nested message fields that implement the flags.Interface
  // When set to false, no flags will be generated for fields within this message,
  // even if they have flag configurations.
  bool nested = 1;

  // Name specifies a custom name prefix for all flags in this message field.
  // This is useful for organizing flags into logical groups and avoiding
  // naming conflicts when multiple messages have similarly named fields.
  //
  // Examples:
  //   - name "server" would generate "--server.host", "--server.port"
  //   - name "database" would generate "--database.url", "--database.timeout"
  //   - empty name would generate "--host", "--port" (field names directly)
  //
  // The name is automatically converted to kebab-case format (underscores become hyphens)
  // and separated from the flag name with a dot.
  string name = 2;
}

// RepeatedFlags defines configuration for repeated fields (slices/arrays).
//
// This allows customization of how repeated values are handled in the CLI.
// The type oneof field determines the element type of the repeated field.
message RepeatedFlags {
  oneof type {
    // Supported types for repeated fields - each corresponds to its specific flag type
    // configuration that controls how individual elements are handled.
    FloatFlag float = 1; // Repeated 32-bit floating point
    DoubleFlag double = 2; // Repeated 64-bit floating point
    Int32Flag int32 = 3; // Repeated 32-bit signed integer
    Int64Flag int64 = 4; // Repeated 64-bit signed integer
    Uint32Flag uint32 = 5; // Repeated 32-bit unsigned integer
    Uint64Flag uint64 = 6; // Repeated 64-bit unsigned integer
    Sint32Flag sint32 = 7; // Repeated 32-bit signed integer (zigzag)
    Sint64Flag sint64 = 8; // Repeated 64-bit signed integer (zigzag)
    Fixed32Flag fixed32 = 9; // Repeated 32-bit fixed-point integer
    Fixed64Flag fixed64 = 10; // Repeated 64-bit fixed-point integer
    Sfixed32Flag sfixed32 = 11; // Repeated 32-bit signed fixed-point integer
    Sfixed64Flag sfixed64 = 12; // Repeated 64-bit signed fixed-point integer
    BoolFlag bool = 13; // Repeated boolean values
    StringFlag string = 14; // Repeated UTF-8 strings

    // Bytes field type with encoding type selection
    BytesFlag bytes = 15; // Repeated arbitrary bytes with encoding format

    EnumFlag enum = 16; // Repeated enum values
    DurationFlag duration = 17; // Repeated duration values
  }
}
